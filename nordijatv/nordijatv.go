// Code generated by gowsdl DO NOT EDIT.

package nordijatv

import (
	"context"
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"time"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type AnyType struct {
	InnerXML string `xml:",innerxml"`
}

type AnyURI string

type NCName string

type CreateServiceProvider struct {
	XMLName xml.Name `xml:"urn:IpTvService createServiceProvider"`

	In0 *ServiceProvider `xml:"in0,omitempty" json:"in0,omitempty"`
}

type CreateServiceProviderResponse struct {
	XMLName xml.Name `xml:"urn:IpTvService createServiceProviderResponse"`

	CreateServiceProviderReturn *ServiceStatus `xml:"createServiceProviderReturn,omitempty" json:"createServiceProviderReturn,omitempty"`
}

type UpdateServiceProvider struct {
	XMLName xml.Name `xml:"urn:IpTvService updateServiceProvider"`

	In0 *ServiceProvider `xml:"in0,omitempty" json:"in0,omitempty"`
}

type UpdateServiceProviderResponse struct {
	XMLName xml.Name `xml:"urn:IpTvService updateServiceProviderResponse"`

	UpdateServiceProviderReturn *ServiceStatus `xml:"updateServiceProviderReturn,omitempty" json:"updateServiceProviderReturn,omitempty"`
}

type ArchiveServiceProvider struct {
	XMLName xml.Name `xml:"urn:IpTvService archiveServiceProvider"`

	In0 *ServiceProvider `xml:"in0,omitempty" json:"in0,omitempty"`
}

type ArchiveServiceProviderResponse struct {
	XMLName xml.Name `xml:"urn:IpTvService archiveServiceProviderResponse"`

	ArchiveServiceProviderReturn *ServiceStatus `xml:"archiveServiceProviderReturn,omitempty" json:"archiveServiceProviderReturn,omitempty"`
}

type FindServiceProviderById struct {
	XMLName xml.Name `xml:"urn:IpTvService findServiceProviderById"`

	In0 string `xml:"in0,omitempty" json:"in0,omitempty"`
}

type FindServiceProviderByIdResponse struct {
	XMLName xml.Name `xml:"urn:IpTvService findServiceProviderByIdResponse"`

	FindServiceProviderByIdReturn *ServiceProvider `xml:"findServiceProviderByIdReturn,omitempty" json:"findServiceProviderByIdReturn,omitempty"`
}

type FindTVChannelByTVChannelId struct {
	XMLName xml.Name `xml:"urn:IpTvService findTVChannelByTVChannelId"`

	In0 string `xml:"in0,omitempty" json:"in0,omitempty"`
}

type FindTVChannelByTVChannelIdResponse struct {
	XMLName xml.Name `xml:"urn:IpTvService findTVChannelByTVChannelIdResponse"`

	FindTVChannelByTVChannelIdReturn *TVChannel `xml:"findTVChannelByTVChannelIdReturn,omitempty" json:"findTVChannelByTVChannelIdReturn,omitempty"`
}

type Fault ServiceFault

type FindTVChannels struct {
	XMLName xml.Name `xml:"urn:IpTvService findTVChannels"`
}

type FindTVChannelsResponse struct {
	XMLName xml.Name `xml:"urn:IpTvService findTVChannelsResponse"`

	FindTVChannelsReturn []*TVChannel `xml:"findTVChannelsReturn,omitempty" json:"findTVChannelsReturn,omitempty"`
}

type FindTVChannelsByCustomerId struct {
	XMLName xml.Name `xml:"urn:IpTvService findTVChannelsByCustomerId"`

	In0 string `xml:"in0,omitempty" json:"in0,omitempty"`
}

type FindTVChannelsByCustomerIdResponse struct {
	XMLName xml.Name `xml:"urn:IpTvService findTVChannelsByCustomerIdResponse"`

	FindTVChannelsByCustomerIdReturn []*TVChannel `xml:"findTVChannelsByCustomerIdReturn,omitempty" json:"findTVChannelsByCustomerIdReturn,omitempty"`
}

type FindFavoriteTVChannelsByDeviceId struct {
	XMLName xml.Name `xml:"urn:IpTvService findFavoriteTVChannelsByDeviceId"`

	In0 string `xml:"in0,omitempty" json:"in0,omitempty"`
}

type FindFavoriteTVChannelsByDeviceIdResponse struct {
	XMLName xml.Name `xml:"urn:IpTvService findFavoriteTVChannelsByDeviceIdResponse"`

	FindFavoriteTVChannelsByDeviceIdReturn []*TVChannel `xml:"findFavoriteTVChannelsByDeviceIdReturn,omitempty" json:"findFavoriteTVChannelsByDeviceIdReturn,omitempty"`
}

type FindTVChannelsByTVBundleId struct {
	XMLName xml.Name `xml:"urn:IpTvService findTVChannelsByTVBundleId"`

	In0 string `xml:"in0,omitempty" json:"in0,omitempty"`
}

type FindTVChannelsByTVBundleIdResponse struct {
	XMLName xml.Name `xml:"urn:IpTvService findTVChannelsByTVBundleIdResponse"`

	FindTVChannelsByTVBundleIdReturn []*TVChannel `xml:"findTVChannelsByTVBundleIdReturn,omitempty" json:"findTVChannelsByTVBundleIdReturn,omitempty"`
}

type FindTVBundleByTVBundleId struct {
	XMLName xml.Name `xml:"urn:IpTvService findTVBundleByTVBundleId"`

	In0 string `xml:"in0,omitempty" json:"in0,omitempty"`
}

type FindTVBundleByTVBundleIdResponse struct {
	XMLName xml.Name `xml:"urn:IpTvService findTVBundleByTVBundleIdResponse"`

	FindTVBundleByTVBundleIdReturn *TVBundle `xml:"findTVBundleByTVBundleIdReturn,omitempty" json:"findTVBundleByTVBundleIdReturn,omitempty"`
}

type FindTVBundleByTVBundleName struct {
	XMLName xml.Name `xml:"urn:IpTvService findTVBundleByTVBundleName"`

	In0 string `xml:"in0,omitempty" json:"in0,omitempty"`
}

type FindTVBundleByTVBundleNameResponse struct {
	XMLName xml.Name `xml:"urn:IpTvService findTVBundleByTVBundleNameResponse"`

	FindTVBundleByTVBundleNameReturn []*TVBundle `xml:"findTVBundleByTVBundleNameReturn,omitempty" json:"findTVBundleByTVBundleNameReturn,omitempty"`
}

type FindTVBundles struct {
	XMLName xml.Name `xml:"urn:IpTvService findTVBundles"`
}

type FindTVBundlesResponse struct {
	XMLName xml.Name `xml:"urn:IpTvService findTVBundlesResponse"`

	FindTVBundlesReturn []*TVBundle `xml:"findTVBundlesReturn,omitempty" json:"findTVBundlesReturn,omitempty"`
}

type CreateTVChannel struct {
	XMLName xml.Name `xml:"urn:IpTvService createTVChannel"`

	In0 *TVChannel `xml:"in0,omitempty" json:"in0,omitempty"`
}

type CreateTVChannelResponse struct {
	XMLName xml.Name `xml:"urn:IpTvService createTVChannelResponse"`

	CreateTVChannelReturn *ServiceStatus `xml:"createTVChannelReturn,omitempty" json:"createTVChannelReturn,omitempty"`
}

type UpdateTVChannel struct {
	XMLName xml.Name `xml:"urn:IpTvService updateTVChannel"`

	In0 *TVChannel `xml:"in0,omitempty" json:"in0,omitempty"`
}

type UpdateTVChannelResponse struct {
	XMLName xml.Name `xml:"urn:IpTvService updateTVChannelResponse"`

	UpdateTVChannelReturn *ServiceStatus `xml:"updateTVChannelReturn,omitempty" json:"updateTVChannelReturn,omitempty"`
}

type DeleteTVChannel struct {
	XMLName xml.Name `xml:"urn:IpTvService deleteTVChannel"`

	In0 *TVChannel `xml:"in0,omitempty" json:"in0,omitempty"`
}

type DeleteTVChannelResponse struct {
	XMLName xml.Name `xml:"urn:IpTvService deleteTVChannelResponse"`

	DeleteTVChannelReturn *ServiceStatus `xml:"deleteTVChannelReturn,omitempty" json:"deleteTVChannelReturn,omitempty"`
}

type CreateTVBundle struct {
	XMLName xml.Name `xml:"urn:IpTvService createTVBundle"`

	In0 *TVBundle `xml:"in0,omitempty" json:"in0,omitempty"`
}

type CreateChannelBundle struct {
	XMLName xml.Name `xml:"urn:IpTvService createChannelBundle"`

	In0 *ChannelBundle `xml:"in0,omitempty" json:"in0,omitempty"`
}

type CreateTVBundleResponse struct {
	XMLName xml.Name `xml:"urn:IpTvService createTVBundleResponse"`

	CreateTVBundleReturn *ServiceStatus `xml:"createTVBundleReturn,omitempty" json:"createTVBundleReturn,omitempty"`
}

type CreateChannelBundleResponse struct {
	XMLName xml.Name `xml:"urn:IpTvService createChannelBundleResponse"`

	CreateChannelBundleReturn *ServiceStatus `xml:"createChannelBundleReturn,omitempty" json:"createChannelBundleReturn,omitempty"`
}

type UpdateTVBundle struct {
	XMLName xml.Name `xml:"urn:IpTvService updateTVBundle"`

	In0 *TVBundle `xml:"in0,omitempty" json:"in0,omitempty"`
}

type UpdateTVBundleResponse struct {
	XMLName xml.Name `xml:"urn:IpTvService updateTVBundleResponse"`

	UpdateTVBundleReturn *ServiceStatus `xml:"updateTVBundleReturn,omitempty" json:"updateTVBundleReturn,omitempty"`
}

type DeleteTVBundle struct {
	XMLName xml.Name `xml:"urn:IpTvService deleteTVBundle"`

	In0 *TVBundle `xml:"in0,omitempty" json:"in0,omitempty"`
}

type DeleteTVBundleResponse struct {
	XMLName xml.Name `xml:"urn:IpTvService deleteTVBundleResponse"`

	DeleteTVBundleReturn *ServiceStatus `xml:"deleteTVBundleReturn,omitempty" json:"deleteTVBundleReturn,omitempty"`
}

type ServiceProvider struct {
	Created time.Time `xml:"created,omitempty" json:"created,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	ServiceproviderId string `xml:"serviceproviderId,omitempty" json:"serviceproviderId,omitempty"`

	Updated time.Time `xml:"updated,omitempty" json:"updated,omitempty"`
}

type ChannelProperty struct {
	ChannelPropertyKey string `xml:"channelPropertyKey,omitempty" json:"channelPropertyKey,omitempty"`

	ChannelPropertyValue string `xml:"channelPropertyValue,omitempty" json:"channelPropertyValue,omitempty"`
}

type TVChannel struct {
	BitRate int64 `xml:"bitRate,omitempty" json:"bitRate,omitempty"`

	ChannelNumber int32 `xml:"channelNumber,omitempty" json:"channelNumber,omitempty"`

	ChannelType string `xml:"channelType,omitempty" json:"channelType,omitempty"`

	ChannelTypeInfo string `xml:"channelTypeInfo,omitempty" json:"channelTypeInfo,omitempty"`

	Created time.Time `xml:"created,omitempty" json:"created,omitempty"`

	Description string `xml:"description,omitempty" json:"description,omitempty"`

	GeckoAreas []string `xml:"geckoAreas,omitempty" json:"geckoAreas,omitempty"`

	Locked bool `xml:"locked,omitempty" json:"locked,omitempty"`

	LogEvents bool `xml:"logEvents,omitempty" json:"logEvents,omitempty"`

	LongName string `xml:"longName,omitempty" json:"longName,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	ParentalLock bool `xml:"parentalLock,omitempty" json:"parentalLock,omitempty"`

	Properties []*ChannelProperty `xml:"properties,omitempty" json:"properties,omitempty"`

	PvrAllowed bool `xml:"pvrAllowed,omitempty" json:"pvrAllowed,omitempty"`

	ServiceproviderId string `xml:"serviceproviderId,omitempty" json:"serviceproviderId,omitempty"`

	SortOrder int32 `xml:"sortOrder,omitempty" json:"sortOrder,omitempty"`

	TvChannelId string `xml:"tvChannelId,omitempty" json:"tvChannelId,omitempty"`

	Updated time.Time `xml:"updated,omitempty" json:"updated,omitempty"`

	Url string `xml:"url,omitempty" json:"url,omitempty"`
}

type ChannelBundle struct {
	Created time.Time `xml:"created,omitempty" json:"created,omitempty"`

	Description string `xml:"description,omitempty" json:"description,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	ProductType string `xml:"productType,omitempty" json:"productType,omitempty"`

	ServiceproviderId string `xml:"serviceproviderId,omitempty" json:"serviceproviderId,omitempty"`

	SortOrder int32 `xml:"sortOrder,omitempty" json:"sortOrder,omitempty"`

	TvBundleId string `xml:"tvBundleId,omitempty" json:"tvBundleId,omitempty"`

	TvChannels []*TVChannel `xml:"tvChannels,omitempty" json:"tvChannels,omitempty"`

	Updated time.Time `xml:"updated,omitempty" json:"updated,omitempty"`
}

type TVBundle struct {
	Created time.Time `xml:"created,omitempty" json:"created,omitempty"`

	Description string `xml:"description,omitempty" json:"description,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	ServiceproviderId string `xml:"serviceproviderId,omitempty" json:"serviceproviderId,omitempty"`

	SortOrder int32 `xml:"sortOrder,omitempty" json:"sortOrder,omitempty"`

	TvBundleId string `xml:"tvBundleId,omitempty" json:"tvBundleId,omitempty"`

	TvChannels []*TVChannel `xml:"tvChannels,omitempty" json:"tvChannels,omitempty"`

	Updated time.Time `xml:"updated,omitempty" json:"updated,omitempty"`
}

type ServiceFault struct {
	XMLName xml.Name `xml:"urn:IpTvService fault"`
}

type ServiceStatus struct {
	Message string `xml:"message,omitempty" json:"message,omitempty"`

	ReferenceId string `xml:"referenceId,omitempty" json:"referenceId,omitempty"`

	Role string `xml:"role,omitempty" json:"role,omitempty"`

	StatusCode string `xml:"statusCode,omitempty" json:"statusCode,omitempty"`

	StatusSubCode string `xml:"statusSubCode,omitempty" json:"statusSubCode,omitempty"`
}

type IpTvWebServiceEndPoint interface {

	// Error can be either of the following types:
	//
	//   - ServiceFault

	CreateServiceProvider(request *CreateServiceProvider) (*CreateServiceProviderResponse, error)

	CreateServiceProviderContext(ctx context.Context, request *CreateServiceProvider) (*CreateServiceProviderResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	UpdateServiceProvider(request *UpdateServiceProvider) (*UpdateServiceProviderResponse, error)

	UpdateServiceProviderContext(ctx context.Context, request *UpdateServiceProvider) (*UpdateServiceProviderResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	ArchiveServiceProvider(request *ArchiveServiceProvider) (*ArchiveServiceProviderResponse, error)

	ArchiveServiceProviderContext(ctx context.Context, request *ArchiveServiceProvider) (*ArchiveServiceProviderResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	FindServiceProviderById(request *FindServiceProviderById) (*FindServiceProviderByIdResponse, error)

	FindServiceProviderByIdContext(ctx context.Context, request *FindServiceProviderById) (*FindServiceProviderByIdResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	FindTVChannelByTVChannelId(request *FindTVChannelByTVChannelId) (*FindTVChannelByTVChannelIdResponse, error)

	FindTVChannelByTVChannelIdContext(ctx context.Context, request *FindTVChannelByTVChannelId) (*FindTVChannelByTVChannelIdResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	FindTVChannels(request *FindTVChannels) (*FindTVChannelsResponse, error)

	FindTVChannelsContext(ctx context.Context, request *FindTVChannels) (*FindTVChannelsResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	FindTVChannelsByCustomerId(request *FindTVChannelsByCustomerId) (*FindTVChannelsByCustomerIdResponse, error)

	FindTVChannelsByCustomerIdContext(ctx context.Context, request *FindTVChannelsByCustomerId) (*FindTVChannelsByCustomerIdResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	FindFavoriteTVChannelsByDeviceId(request *FindFavoriteTVChannelsByDeviceId) (*FindFavoriteTVChannelsByDeviceIdResponse, error)

	FindFavoriteTVChannelsByDeviceIdContext(ctx context.Context, request *FindFavoriteTVChannelsByDeviceId) (*FindFavoriteTVChannelsByDeviceIdResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	FindTVChannelsByTVBundleId(request *FindTVChannelsByTVBundleId) (*FindTVChannelsByTVBundleIdResponse, error)

	FindTVChannelsByTVBundleIdContext(ctx context.Context, request *FindTVChannelsByTVBundleId) (*FindTVChannelsByTVBundleIdResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	FindTVBundleByTVBundleId(request *FindTVBundleByTVBundleId) (*FindTVBundleByTVBundleIdResponse, error)

	FindTVBundleByTVBundleIdContext(ctx context.Context, request *FindTVBundleByTVBundleId) (*FindTVBundleByTVBundleIdResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	FindTVBundleByTVBundleName(request *FindTVBundleByTVBundleName) (*FindTVBundleByTVBundleNameResponse, error)

	FindTVBundleByTVBundleNameContext(ctx context.Context, request *FindTVBundleByTVBundleName) (*FindTVBundleByTVBundleNameResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	FindTVBundles(request *FindTVBundles) (*FindTVBundlesResponse, error)

	FindTVBundlesContext(ctx context.Context, request *FindTVBundles) (*FindTVBundlesResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	CreateTVChannel(request *CreateTVChannel) (*CreateTVChannelResponse, error)

	CreateTVChannelContext(ctx context.Context, request *CreateTVChannel) (*CreateTVChannelResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	UpdateTVChannel(request *UpdateTVChannel) (*UpdateTVChannelResponse, error)

	UpdateTVChannelContext(ctx context.Context, request *UpdateTVChannel) (*UpdateTVChannelResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	DeleteTVChannel(request *DeleteTVChannel) (*DeleteTVChannelResponse, error)

	DeleteTVChannelContext(ctx context.Context, request *DeleteTVChannel) (*DeleteTVChannelResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	CreateTVBundle(request *CreateTVBundle) (*CreateTVBundleResponse, error)

	CreateTVBundleContext(ctx context.Context, request *CreateTVBundle) (*CreateTVBundleResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	CreateChannelBundle(request *CreateChannelBundle) (*CreateChannelBundleResponse, error)

	CreateChannelBundleContext(ctx context.Context, request *CreateChannelBundle) (*CreateChannelBundleResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	UpdateTVBundle(request *UpdateTVBundle) (*UpdateTVBundleResponse, error)

	UpdateTVBundleContext(ctx context.Context, request *UpdateTVBundle) (*UpdateTVBundleResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	DeleteTVBundle(request *DeleteTVBundle) (*DeleteTVBundleResponse, error)

	DeleteTVBundleContext(ctx context.Context, request *DeleteTVBundle) (*DeleteTVBundleResponse, error)
}

type ipTvWebServiceEndPoint struct {
	client *soap.Client
}

func NewIpTvWebServiceEndPoint(client *soap.Client) IpTvWebServiceEndPoint {
	return &ipTvWebServiceEndPoint{
		client: client,
	}
}

func (service *ipTvWebServiceEndPoint) CreateServiceProviderContext(ctx context.Context, request *CreateServiceProvider) (*CreateServiceProviderResponse, error) {
	response := new(CreateServiceProviderResponse)
	err := service.client.CallContext(ctx, "createServiceProvider", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ipTvWebServiceEndPoint) CreateServiceProvider(request *CreateServiceProvider) (*CreateServiceProviderResponse, error) {
	return service.CreateServiceProviderContext(
		context.Background(),
		request,
	)
}

func (service *ipTvWebServiceEndPoint) UpdateServiceProviderContext(ctx context.Context, request *UpdateServiceProvider) (*UpdateServiceProviderResponse, error) {
	response := new(UpdateServiceProviderResponse)
	err := service.client.CallContext(ctx, "updateServiceProvider", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ipTvWebServiceEndPoint) UpdateServiceProvider(request *UpdateServiceProvider) (*UpdateServiceProviderResponse, error) {
	return service.UpdateServiceProviderContext(
		context.Background(),
		request,
	)
}

func (service *ipTvWebServiceEndPoint) ArchiveServiceProviderContext(ctx context.Context, request *ArchiveServiceProvider) (*ArchiveServiceProviderResponse, error) {
	response := new(ArchiveServiceProviderResponse)
	err := service.client.CallContext(ctx, "archiveServiceProvider", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ipTvWebServiceEndPoint) ArchiveServiceProvider(request *ArchiveServiceProvider) (*ArchiveServiceProviderResponse, error) {
	return service.ArchiveServiceProviderContext(
		context.Background(),
		request,
	)
}

func (service *ipTvWebServiceEndPoint) FindServiceProviderByIdContext(ctx context.Context, request *FindServiceProviderById) (*FindServiceProviderByIdResponse, error) {
	response := new(FindServiceProviderByIdResponse)
	err := service.client.CallContext(ctx, "findServiceProviderById", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ipTvWebServiceEndPoint) FindServiceProviderById(request *FindServiceProviderById) (*FindServiceProviderByIdResponse, error) {
	return service.FindServiceProviderByIdContext(
		context.Background(),
		request,
	)
}

func (service *ipTvWebServiceEndPoint) FindTVChannelByTVChannelIdContext(ctx context.Context, request *FindTVChannelByTVChannelId) (*FindTVChannelByTVChannelIdResponse, error) {
	response := new(FindTVChannelByTVChannelIdResponse)
	err := service.client.CallContext(ctx, "findTVChannelByTVChannelId", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ipTvWebServiceEndPoint) FindTVChannelByTVChannelId(request *FindTVChannelByTVChannelId) (*FindTVChannelByTVChannelIdResponse, error) {
	return service.FindTVChannelByTVChannelIdContext(
		context.Background(),
		request,
	)
}

func (service *ipTvWebServiceEndPoint) FindTVChannelsContext(ctx context.Context, request *FindTVChannels) (*FindTVChannelsResponse, error) {
	response := new(FindTVChannelsResponse)
	err := service.client.CallContext(ctx, "findTVChannels", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ipTvWebServiceEndPoint) FindTVChannels(request *FindTVChannels) (*FindTVChannelsResponse, error) {
	return service.FindTVChannelsContext(
		context.Background(),
		request,
	)
}

func (service *ipTvWebServiceEndPoint) FindTVChannelsByCustomerIdContext(ctx context.Context, request *FindTVChannelsByCustomerId) (*FindTVChannelsByCustomerIdResponse, error) {
	response := new(FindTVChannelsByCustomerIdResponse)
	err := service.client.CallContext(ctx, "findTVChannelsByCustomerId", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ipTvWebServiceEndPoint) FindTVChannelsByCustomerId(request *FindTVChannelsByCustomerId) (*FindTVChannelsByCustomerIdResponse, error) {
	return service.FindTVChannelsByCustomerIdContext(
		context.Background(),
		request,
	)
}

func (service *ipTvWebServiceEndPoint) FindFavoriteTVChannelsByDeviceIdContext(ctx context.Context, request *FindFavoriteTVChannelsByDeviceId) (*FindFavoriteTVChannelsByDeviceIdResponse, error) {
	response := new(FindFavoriteTVChannelsByDeviceIdResponse)
	err := service.client.CallContext(ctx, "findFavoriteTVChannelsByDeviceId", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ipTvWebServiceEndPoint) FindFavoriteTVChannelsByDeviceId(request *FindFavoriteTVChannelsByDeviceId) (*FindFavoriteTVChannelsByDeviceIdResponse, error) {
	return service.FindFavoriteTVChannelsByDeviceIdContext(
		context.Background(),
		request,
	)
}

func (service *ipTvWebServiceEndPoint) FindTVChannelsByTVBundleIdContext(ctx context.Context, request *FindTVChannelsByTVBundleId) (*FindTVChannelsByTVBundleIdResponse, error) {
	response := new(FindTVChannelsByTVBundleIdResponse)
	err := service.client.CallContext(ctx, "findTVChannelsByTVBundleId", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ipTvWebServiceEndPoint) FindTVChannelsByTVBundleId(request *FindTVChannelsByTVBundleId) (*FindTVChannelsByTVBundleIdResponse, error) {
	return service.FindTVChannelsByTVBundleIdContext(
		context.Background(),
		request,
	)
}

func (service *ipTvWebServiceEndPoint) FindTVBundleByTVBundleIdContext(ctx context.Context, request *FindTVBundleByTVBundleId) (*FindTVBundleByTVBundleIdResponse, error) {
	response := new(FindTVBundleByTVBundleIdResponse)
	err := service.client.CallContext(ctx, "findTVBundleByTVBundleId", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ipTvWebServiceEndPoint) FindTVBundleByTVBundleId(request *FindTVBundleByTVBundleId) (*FindTVBundleByTVBundleIdResponse, error) {
	return service.FindTVBundleByTVBundleIdContext(
		context.Background(),
		request,
	)
}

func (service *ipTvWebServiceEndPoint) FindTVBundleByTVBundleNameContext(ctx context.Context, request *FindTVBundleByTVBundleName) (*FindTVBundleByTVBundleNameResponse, error) {
	response := new(FindTVBundleByTVBundleNameResponse)
	err := service.client.CallContext(ctx, "findTVBundleByTVBundleName", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ipTvWebServiceEndPoint) FindTVBundleByTVBundleName(request *FindTVBundleByTVBundleName) (*FindTVBundleByTVBundleNameResponse, error) {
	return service.FindTVBundleByTVBundleNameContext(
		context.Background(),
		request,
	)
}

func (service *ipTvWebServiceEndPoint) FindTVBundlesContext(ctx context.Context, request *FindTVBundles) (*FindTVBundlesResponse, error) {
	response := new(FindTVBundlesResponse)
	err := service.client.CallContext(ctx, "findTVBundles", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ipTvWebServiceEndPoint) FindTVBundles(request *FindTVBundles) (*FindTVBundlesResponse, error) {
	return service.FindTVBundlesContext(
		context.Background(),
		request,
	)
}

func (service *ipTvWebServiceEndPoint) CreateTVChannelContext(ctx context.Context, request *CreateTVChannel) (*CreateTVChannelResponse, error) {
	response := new(CreateTVChannelResponse)
	err := service.client.CallContext(ctx, "createTVChannel", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ipTvWebServiceEndPoint) CreateTVChannel(request *CreateTVChannel) (*CreateTVChannelResponse, error) {
	return service.CreateTVChannelContext(
		context.Background(),
		request,
	)
}

func (service *ipTvWebServiceEndPoint) UpdateTVChannelContext(ctx context.Context, request *UpdateTVChannel) (*UpdateTVChannelResponse, error) {
	response := new(UpdateTVChannelResponse)
	err := service.client.CallContext(ctx, "updateTVChannel", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ipTvWebServiceEndPoint) UpdateTVChannel(request *UpdateTVChannel) (*UpdateTVChannelResponse, error) {
	return service.UpdateTVChannelContext(
		context.Background(),
		request,
	)
}

func (service *ipTvWebServiceEndPoint) DeleteTVChannelContext(ctx context.Context, request *DeleteTVChannel) (*DeleteTVChannelResponse, error) {
	response := new(DeleteTVChannelResponse)
	err := service.client.CallContext(ctx, "deleteTVChannel", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ipTvWebServiceEndPoint) DeleteTVChannel(request *DeleteTVChannel) (*DeleteTVChannelResponse, error) {
	return service.DeleteTVChannelContext(
		context.Background(),
		request,
	)
}

func (service *ipTvWebServiceEndPoint) CreateTVBundleContext(ctx context.Context, request *CreateTVBundle) (*CreateTVBundleResponse, error) {
	response := new(CreateTVBundleResponse)
	err := service.client.CallContext(ctx, "createTVBundle", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ipTvWebServiceEndPoint) CreateTVBundle(request *CreateTVBundle) (*CreateTVBundleResponse, error) {
	return service.CreateTVBundleContext(
		context.Background(),
		request,
	)
}

func (service *ipTvWebServiceEndPoint) CreateChannelBundleContext(ctx context.Context, request *CreateChannelBundle) (*CreateChannelBundleResponse, error) {
	response := new(CreateChannelBundleResponse)
	err := service.client.CallContext(ctx, "createChannelBundle", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ipTvWebServiceEndPoint) CreateChannelBundle(request *CreateChannelBundle) (*CreateChannelBundleResponse, error) {
	return service.CreateChannelBundleContext(
		context.Background(),
		request,
	)
}

func (service *ipTvWebServiceEndPoint) UpdateTVBundleContext(ctx context.Context, request *UpdateTVBundle) (*UpdateTVBundleResponse, error) {
	response := new(UpdateTVBundleResponse)
	err := service.client.CallContext(ctx, "updateTVBundle", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ipTvWebServiceEndPoint) UpdateTVBundle(request *UpdateTVBundle) (*UpdateTVBundleResponse, error) {
	return service.UpdateTVBundleContext(
		context.Background(),
		request,
	)
}

func (service *ipTvWebServiceEndPoint) DeleteTVBundleContext(ctx context.Context, request *DeleteTVBundle) (*DeleteTVBundleResponse, error) {
	response := new(DeleteTVBundleResponse)
	err := service.client.CallContext(ctx, "deleteTVBundle", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *ipTvWebServiceEndPoint) DeleteTVBundle(request *DeleteTVBundle) (*DeleteTVBundleResponse, error) {
	return service.DeleteTVBundleContext(
		context.Background(),
		request,
	)
}
