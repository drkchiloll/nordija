// Code generated by gowsdl DO NOT EDIT.

package nordijacs

import (
	"context"
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"time"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type AnyType struct {
	InnerXML string `xml:",innerxml"`
}

type AnyURI string

type NCName string

//
//
// CRUD acronym means “Create, Read, Update, Delete” + "Reset"
// Some objects have an extra element called 'action' which is of the type 'CRUDactionType'
// Is sometimes used on "valueobject" to tell the system how to handle the object.
// Currently only used when calling manageAccount.
//

type CRUDactionType string

const (
	CRUDactionTypeCREATE CRUDactionType = "CREATE"

	CRUDactionTypeREAD CRUDactionType = "READ"

	CRUDactionTypeUPDATE CRUDactionType = "UPDATE"

	CRUDactionTypeDELETE CRUDactionType = "DELETE"

	CRUDactionTypeRESET CRUDactionType = "RESET"
)

type Fault ServiceFault

type FindCustomerPropertiesByCustomerId struct {
	XMLName xml.Name `xml:"urn:CustomerService findCustomerPropertiesByCustomerId"`

	CustomerId string `xml:"customerId,omitempty" json:"customerId,omitempty"`
}

type FindCustomerPropertiesByCustomerIdResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService findCustomerPropertiesByCustomerIdResponse"`

	FindCustomerPropertiesByCustomerIdReturn []*CustomerProperty `xml:"findCustomerPropertiesByCustomerIdReturn,omitempty" json:"findCustomerPropertiesByCustomerIdReturn,omitempty"`
}

type FindCustomerPropertyByCustomerIdAndPropertyKey struct {
	XMLName xml.Name `xml:"urn:CustomerService findCustomerPropertyByCustomerIdAndPropertyKey"`

	CustomerId string `xml:"customerId,omitempty" json:"customerId,omitempty"`

	PropertyKey string `xml:"propertyKey,omitempty" json:"propertyKey,omitempty"`
}

type FindCustomerPropertyByCustomerIdAndPropertyKeyResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService findCustomerPropertyByCustomerIdAndPropertyKeyResponse"`

	FindCustomerPropertyByCustomerIdAndPropertyKeyReturn *CustomerProperty `xml:"findCustomerPropertyByCustomerIdAndPropertyKeyReturn,omitempty" json:"findCustomerPropertyByCustomerIdAndPropertyKeyReturn,omitempty"`
}

type CreateCustomerProperty struct {
	XMLName xml.Name `xml:"urn:CustomerService createCustomerProperty"`

	CustomerProperty *CustomerProperty `xml:"customerProperty,omitempty" json:"customerProperty,omitempty"`
}

type CreateCustomerPropertyResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService createCustomerPropertyResponse"`

	CreateCustomerPropertyReturn *ServiceStatus `xml:"createCustomerPropertyReturn,omitempty" json:"createCustomerPropertyReturn,omitempty"`
}

type UpdateCustomerProperty struct {
	XMLName xml.Name `xml:"urn:CustomerService updateCustomerProperty"`

	CustomerProperty *CustomerProperty `xml:"customerProperty,omitempty" json:"customerProperty,omitempty"`
}

type UpdateCustomerPropertyResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService updateCustomerPropertyResponse"`

	UpdateCustomerPropertyReturn *ServiceStatus `xml:"updateCustomerPropertyReturn,omitempty" json:"updateCustomerPropertyReturn,omitempty"`
}

type DeleteCustomerProperty struct {
	XMLName xml.Name `xml:"urn:CustomerService deleteCustomerProperty"`

	CustomerProperty *CustomerProperty `xml:"customerProperty,omitempty" json:"customerProperty,omitempty"`
}

type DeleteCustomerPropertyResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService deleteCustomerPropertyResponse"`

	DeleteCustomerPropertyReturn *ServiceStatus `xml:"deleteCustomerPropertyReturn,omitempty" json:"deleteCustomerPropertyReturn,omitempty"`
}

type CreateCustomer struct {
	XMLName xml.Name `xml:"urn:CustomerService createCustomer"`

	In0 *Customer `xml:"in0,omitempty" json:"in0,omitempty"`
}

type CreateCustomerResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService createCustomerResponse"`

	CreateCustomerReturn *ServiceStatus `xml:"createCustomerReturn,omitempty" json:"createCustomerReturn,omitempty"`
}

type UpdateCustomer struct {
	XMLName xml.Name `xml:"urn:CustomerService updateCustomer"`

	In0 *Customer `xml:"in0,omitempty" json:"in0,omitempty"`
}

type UpdateCustomerResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService updateCustomerResponse"`

	UpdateCustomerReturn *ServiceStatus `xml:"updateCustomerReturn,omitempty" json:"updateCustomerReturn,omitempty"`
}

type ArchiveCustomer struct {
	XMLName xml.Name `xml:"urn:CustomerService archiveCustomer"`

	In0 *Customer `xml:"in0,omitempty" json:"in0,omitempty"`
}

type ArchiveCustomerResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService archiveCustomerResponse"`

	ArchiveCustomerReturn *ServiceStatus `xml:"archiveCustomerReturn,omitempty" json:"archiveCustomerReturn,omitempty"`
}

type DeleteCustomer struct {
	XMLName xml.Name `xml:"urn:CustomerService deleteCustomer"`

	In0 *Customer `xml:"in0,omitempty" json:"in0,omitempty"`
}

type DeleteCustomerResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService deleteCustomerResponse"`

	DeleteCustomerReturn *ServiceStatus `xml:"deleteCustomerReturn,omitempty" json:"deleteCustomerReturn,omitempty"`
}

type FindCustomerById struct {
	XMLName xml.Name `xml:"urn:CustomerService findCustomerById"`

	In0 string `xml:"in0,omitempty" json:"in0,omitempty"`
}

type FindCustomerByIdResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService findCustomerByIdResponse"`

	FindCustomerByIdReturn *Customer `xml:"findCustomerByIdReturn,omitempty" json:"findCustomerByIdReturn,omitempty"`
}

type FindCustomersBySurName struct {
	XMLName xml.Name `xml:"urn:CustomerService findCustomersBySurName"`

	In0 string `xml:"in0,omitempty" json:"in0,omitempty"`
}

type FindCustomersBySurNameResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService findCustomersBySurNameResponse"`

	FindCustomersBySurNameReturn []*Customer `xml:"findCustomersBySurNameReturn,omitempty" json:"findCustomersBySurNameReturn,omitempty"`
}

type FindCustomersByCustomerGroupId struct {
	XMLName xml.Name `xml:"urn:CustomerService findCustomersByCustomerGroupId"`

	In0 string `xml:"in0,omitempty" json:"in0,omitempty"`
}

type FindCustomersByCustomerGroupIdResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService findCustomersByCustomerGroupIdResponse"`

	FindCustomersByCustomerGroupIdReturn []*Customer `xml:"findCustomersByCustomerGroupIdReturn,omitempty" json:"findCustomersByCustomerGroupIdReturn,omitempty"`
}

type FindCustomersByLocationId struct {
	XMLName xml.Name `xml:"urn:CustomerService findCustomersByLocationId"`

	In0 string `xml:"in0,omitempty" json:"in0,omitempty"`
}

type FindCustomersByLocationIdResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService findCustomersByLocationIdResponse"`

	FindCustomersByLocationIdReturn []*Customer `xml:"findCustomersByLocationIdReturn,omitempty" json:"findCustomersByLocationIdReturn,omitempty"`
}

type FindCustomerIdsAndTimestampByCustomerIdLikeMask struct {
	XMLName xml.Name `xml:"urn:CustomerService findCustomerIdsAndTimestampByCustomerIdLikeMask"`

	In0 string `xml:"in0,omitempty" json:"in0,omitempty"`
}

type FindCustomerIdsAndTimestampByCustomerIdLikeMaskResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService findCustomerIdsAndTimestampByCustomerIdLikeMaskResponse"`

	FindCustomerIdsAndTimestampByCustomerIdLikeMaskReturn []*IdAndTimestamp `xml:"findCustomerIdsAndTimestampByCustomerIdLikeMaskReturn,omitempty" json:"findCustomerIdsAndTimestampByCustomerIdLikeMaskReturn,omitempty"`
}

type FindCustomerGroupIdsAndTimestampByCustomerGroupIdLikeMask struct {
	XMLName xml.Name `xml:"urn:CustomerService findCustomerGroupIdsAndTimestampByCustomerGroupIdLikeMask"`

	In0 string `xml:"in0,omitempty" json:"in0,omitempty"`
}

type FindCustomerGroupIdsAndTimestampByCustomerGroupIdLikeMaskResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService findCustomerGroupIdsAndTimestampByCustomerGroupIdLikeMaskResponse"`

	FindCustomerGroupIdsAndTimestampByCustomerGroupIdLikeMaskReturn []*IdAndTimestamp `xml:"findCustomerGroupIdsAndTimestampByCustomerGroupIdLikeMaskReturn,omitempty" json:"findCustomerGroupIdsAndTimestampByCustomerGroupIdLikeMaskReturn,omitempty"`
}

type FindLocationIdsAndTimestampByLocationIdLikeMask struct {
	XMLName xml.Name `xml:"urn:CustomerService findLocationIdsAndTimestampByLocationIdLikeMask"`

	In0 string `xml:"in0,omitempty" json:"in0,omitempty"`
}

type FindLocationIdsAndTimestampByLocationIdLikeMaskResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService findLocationIdsAndTimestampByLocationIdLikeMaskResponse"`

	FindLocationIdsAndTimestampByLocationIdLikeMaskReturn []*IdAndTimestamp `xml:"findLocationIdsAndTimestampByLocationIdLikeMaskReturn,omitempty" json:"findLocationIdsAndTimestampByLocationIdLikeMaskReturn,omitempty"`
}

type FindDeviceIdsAndTimestampByDeviceIdLikeMask struct {
	XMLName xml.Name `xml:"urn:CustomerService findDeviceIdsAndTimestampByDeviceIdLikeMask"`

	In0 string `xml:"in0,omitempty" json:"in0,omitempty"`
}

type FindDeviceIdsAndTimestampByDeviceIdLikeMaskResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService findDeviceIdsAndTimestampByDeviceIdLikeMaskResponse"`

	FindDeviceIdsAndTimestampByDeviceIdLikeMaskReturn []*IdAndTimestamp `xml:"findDeviceIdsAndTimestampByDeviceIdLikeMaskReturn,omitempty" json:"findDeviceIdsAndTimestampByDeviceIdLikeMaskReturn,omitempty"`
}

type FindProductSubscriptionIdsAndTimestampByProductSubscriptionIdLikeMask struct {
	XMLName xml.Name `xml:"urn:CustomerService findProductSubscriptionIdsAndTimestampByProductSubscriptionIdLikeMask"`

	In0 string `xml:"in0,omitempty" json:"in0,omitempty"`
}

type FindProductSubscriptionIdsAndTimestampByProductSubscriptionIdLikeMaskResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService findProductSubscriptionIdsAndTimestampByProductSubscriptionIdLikeMaskResponse"`

	FindProductSubscriptionIdsAndTimestampByProductSubscriptionIdLikeMaskReturn []*IdAndTimestamp `xml:"findProductSubscriptionIdsAndTimestampByProductSubscriptionIdLikeMaskReturn,omitempty" json:"findProductSubscriptionIdsAndTimestampByProductSubscriptionIdLikeMaskReturn,omitempty"`
}

type AddCustomerIdToCustomerGroupId struct {
	XMLName xml.Name `xml:"urn:CustomerService addCustomerIdToCustomerGroupId"`

	CustomerId string `xml:"CustomerId,omitempty" json:"CustomerId,omitempty"`

	CustomerGroupId string `xml:"CustomerGroupId,omitempty" json:"CustomerGroupId,omitempty"`
}

type AddCustomerIdToCustomerGroupIdResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService addCustomerIdToCustomerGroupIdResponse"`

	AddCustomerIdToCustomerGroupIdReturn *ServiceStatus `xml:"addCustomerIdToCustomerGroupIdReturn,omitempty" json:"addCustomerIdToCustomerGroupIdReturn,omitempty"`
}

type RemoveCustomerIdFromCustomerGroupId struct {
	XMLName xml.Name `xml:"urn:CustomerService removeCustomerIdFromCustomerGroupId"`

	CustomerId string `xml:"CustomerId,omitempty" json:"CustomerId,omitempty"`

	CustomerGroupId string `xml:"CustomerGroupId,omitempty" json:"CustomerGroupId,omitempty"`
}

type RemoveCustomerIdFromCustomerGroupIdResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService removeCustomerIdFromCustomerGroupIdResponse"`

	RemoveCustomerIdFromCustomerGroupIdReturn *ServiceStatus `xml:"removeCustomerIdFromCustomerGroupIdReturn,omitempty" json:"removeCustomerIdFromCustomerGroupIdReturn,omitempty"`
}

type CreateCustomerGroup struct {
	XMLName xml.Name `xml:"urn:CustomerService createCustomerGroup"`

	In0 *CustomerGroup `xml:"in0,omitempty" json:"in0,omitempty"`
}

type CreateCustomerGroupResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService createCustomerGroupResponse"`

	CreateCustomerGroupReturn *ServiceStatus `xml:"createCustomerGroupReturn,omitempty" json:"createCustomerGroupReturn,omitempty"`
}

type RebootDeviceByDeviceId struct {
	XMLName xml.Name `xml:"urn:CustomerService rebootDeviceByDeviceId"`

	DeviceId string `xml:"DeviceId,omitempty" json:"DeviceId,omitempty"`
}

type RebootDeviceByDeviceIdResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService rebootDeviceByDeviceIdResponse"`

	RebootDeviceByDeviceIdReturn *ServiceStatus `xml:"rebootDeviceByDeviceIdReturn,omitempty" json:"rebootDeviceByDeviceIdReturn,omitempty"`
}

type RebootDevicesByCustomerId struct {
	XMLName xml.Name `xml:"urn:CustomerService rebootDevicesByCustomerId"`

	CustomerId string `xml:"CustomerId,omitempty" json:"CustomerId,omitempty"`
}

type RebootDevicesByCustomerIdResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService rebootDevicesByCustomerIdResponse"`

	RebootDevicesByCustomerIdReturn *ServiceStatus `xml:"rebootDevicesByCustomerIdReturn,omitempty" json:"rebootDevicesByCustomerIdReturn,omitempty"`
}

type ReloadPortalByDeviceId struct {
	XMLName xml.Name `xml:"urn:CustomerService reloadPortalByDeviceId"`

	DeviceId string `xml:"DeviceId,omitempty" json:"DeviceId,omitempty"`
}

type ReloadPortalByDeviceIdResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService reloadPortalByDeviceIdResponse"`

	ReloadPortalByDeviceIdReturn *ServiceStatus `xml:"reloadPortalByDeviceIdReturn,omitempty" json:"reloadPortalByDeviceIdReturn,omitempty"`
}

type ReloadPortalsByCustomerId struct {
	XMLName xml.Name `xml:"urn:CustomerService reloadPortalsByCustomerId"`

	CustomerId string `xml:"CustomerId,omitempty" json:"CustomerId,omitempty"`
}

type ReloadPortalsByCustomerIdResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService reloadPortalsByCustomerIdResponse"`

	ReloadPortalsByCustomerIdReturn *ServiceStatus `xml:"reloadPortalsByCustomerIdReturn,omitempty" json:"reloadPortalsByCustomerIdReturn,omitempty"`
}

type UpdateProfileLanguageByCustomerId struct {
	XMLName xml.Name `xml:"urn:CustomerService updateProfileLanguageByCustomerId"`

	CustomerId string `xml:"CustomerId,omitempty" json:"CustomerId,omitempty"`

	Language string `xml:"Language,omitempty" json:"Language,omitempty"`
}

type UpdateProfileLanguageByCustomerIdResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService updateProfileLanguageByCustomerIdResponse"`

	UpdateProfileLanguageByCustomerIdReturn *ServiceStatus `xml:"updateProfileLanguageByCustomerIdReturn,omitempty" json:"updateProfileLanguageByCustomerIdReturn,omitempty"`
}

type CreateWebLogin struct {
	XMLName xml.Name `xml:"urn:CustomerService createWebLogin"`

	CustomerId string `xml:"CustomerId,omitempty" json:"CustomerId,omitempty"`

	Username string `xml:"Username,omitempty" json:"Username,omitempty"`

	Password string `xml:"Password,omitempty" json:"Password,omitempty"`

	Email string `xml:"Email,omitempty" json:"Email,omitempty"`
}

type CreateWebLoginResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService createWebLoginResponse"`

	CreateWebLoginReturn *ServiceStatus `xml:"createWebLoginReturn,omitempty" json:"createWebLoginReturn,omitempty"`
}

type UpdateWebLogin struct {
	XMLName xml.Name `xml:"urn:CustomerService updateWebLogin"`

	CustomerId string `xml:"CustomerId,omitempty" json:"CustomerId,omitempty"`

	Username string `xml:"Username,omitempty" json:"Username,omitempty"`

	Password string `xml:"Password,omitempty" json:"Password,omitempty"`

	Email string `xml:"Email,omitempty" json:"Email,omitempty"`
}

type UpdateWebLoginResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService updateWebLoginResponse"`

	UpdateWebLoginReturn *ServiceStatus `xml:"updateWebLoginReturn,omitempty" json:"updateWebLoginReturn,omitempty"`
}

type DeleteWebLogin struct {
	XMLName xml.Name `xml:"urn:CustomerService deleteWebLogin"`

	CustomerId string `xml:"CustomerId,omitempty" json:"CustomerId,omitempty"`

	Username string `xml:"Username,omitempty" json:"Username,omitempty"`

	Language string `xml:"language,omitempty" json:"language,omitempty"`
}

type DeleteWebLoginResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService deleteWebLoginResponse"`

	DeleteWebLoginReturn *ServiceStatus `xml:"deleteWebLoginReturn,omitempty" json:"deleteWebLoginReturn,omitempty"`
}

type ResetPincodes struct {
	XMLName xml.Name `xml:"urn:CustomerService resetPincodes"`

	CustomerId string `xml:"CustomerId,omitempty" json:"CustomerId,omitempty"`

	MasterCode string `xml:"MasterCode,omitempty" json:"MasterCode,omitempty"`

	PurchaseCode string `xml:"PurchaseCode,omitempty" json:"PurchaseCode,omitempty"`

	ActivationCode string `xml:"ActivationCode,omitempty" json:"ActivationCode,omitempty"`
}

type ResetPincodesResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService resetPincodesResponse"`

	ResetPincodesReturn *ServiceStatus `xml:"resetPincodesReturn,omitempty" json:"resetPincodesReturn,omitempty"`
}

type UpdateCustomerGroup struct {
	XMLName xml.Name `xml:"urn:CustomerService updateCustomerGroup"`

	In0 *CustomerGroup `xml:"in0,omitempty" json:"in0,omitempty"`
}

type UpdateCustomerGroupResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService updateCustomerGroupResponse"`

	UpdateCustomerGroupReturn *ServiceStatus `xml:"updateCustomerGroupReturn,omitempty" json:"updateCustomerGroupReturn,omitempty"`
}

type ArchiveCustomerGroup struct {
	XMLName xml.Name `xml:"urn:CustomerService archiveCustomerGroup"`

	In0 *CustomerGroup `xml:"in0,omitempty" json:"in0,omitempty"`
}

type ArchiveCustomerGroupResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService archiveCustomerGroupResponse"`

	ArchiveCustomerGroupReturn *ServiceStatus `xml:"archiveCustomerGroupReturn,omitempty" json:"archiveCustomerGroupReturn,omitempty"`
}

type DeleteCustomerGroup struct {
	XMLName xml.Name `xml:"urn:CustomerService deleteCustomerGroup"`

	In0 *CustomerGroup `xml:"in0,omitempty" json:"in0,omitempty"`
}

type DeleteCustomerGroupResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService deleteCustomerGroupResponse"`

	DeleteCustomerGroupReturn *ServiceStatus `xml:"deleteCustomerGroupReturn,omitempty" json:"deleteCustomerGroupReturn,omitempty"`
}

type FindCustomerGroupById struct {
	XMLName xml.Name `xml:"urn:CustomerService findCustomerGroupById"`

	In0 string `xml:"in0,omitempty" json:"in0,omitempty"`
}

type FindCustomerGroupByIdResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService findCustomerGroupByIdResponse"`

	FindCustomerGroupByIdReturn *CustomerGroup `xml:"findCustomerGroupByIdReturn,omitempty" json:"findCustomerGroupByIdReturn,omitempty"`
}

type FindCustomerGroupByName struct {
	XMLName xml.Name `xml:"urn:CustomerService findCustomerGroupByName"`

	In0 string `xml:"in0,omitempty" json:"in0,omitempty"`
}

type FindCustomerGroupByNameResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService findCustomerGroupByNameResponse"`

	FindCustomerGroupByNameReturn *CustomerGroup `xml:"findCustomerGroupByNameReturn,omitempty" json:"findCustomerGroupByNameReturn,omitempty"`
}

type FindCustomerGroupsByCustomer struct {
	XMLName xml.Name `xml:"urn:CustomerService findCustomerGroupsByCustomer"`

	In0 *Customer `xml:"in0,omitempty" json:"in0,omitempty"`
}

type FindCustomerGroupsByCustomerResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService findCustomerGroupsByCustomerResponse"`

	FindCustomerGroupsByCustomerReturn []*CustomerGroup `xml:"findCustomerGroupsByCustomerReturn,omitempty" json:"findCustomerGroupsByCustomerReturn,omitempty"`
}

type FindCustomerGroupsByCustomerId struct {
	XMLName xml.Name `xml:"urn:CustomerService findCustomerGroupsByCustomerId"`

	In0 string `xml:"in0,omitempty" json:"in0,omitempty"`
}

type FindCustomerGroupsByCustomerIdResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService findCustomerGroupsByCustomerIdResponse"`

	FindCustomerGroupsByCustomerIdReturn []*CustomerGroup `xml:"findCustomerGroupsByCustomerIdReturn,omitempty" json:"findCustomerGroupsByCustomerIdReturn,omitempty"`
}

type CreateDevice struct {
	XMLName xml.Name `xml:"urn:CustomerService createDevice"`

	In0 *Device `xml:"in0,omitempty" json:"in0,omitempty"`
}

type CreateDeviceResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService createDeviceResponse"`

	CreateDeviceReturn *ServiceStatus `xml:"createDeviceReturn,omitempty" json:"createDeviceReturn,omitempty"`
}

type UpdateDevice struct {
	XMLName xml.Name `xml:"urn:CustomerService updateDevice"`

	In0 *Device `xml:"in0,omitempty" json:"in0,omitempty"`
}

type UpdateDeviceResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService updateDeviceResponse"`

	UpdateDeviceReturn *ServiceStatus `xml:"updateDeviceReturn,omitempty" json:"updateDeviceReturn,omitempty"`
}

type DeleteDevice struct {
	XMLName xml.Name `xml:"urn:CustomerService deleteDevice"`

	In0 *Device `xml:"in0,omitempty" json:"in0,omitempty"`
}

type DeleteDeviceResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService deleteDeviceResponse"`

	DeleteDeviceReturn *ServiceStatus `xml:"deleteDeviceReturn,omitempty" json:"deleteDeviceReturn,omitempty"`
}

type FindDeviceById struct {
	XMLName xml.Name `xml:"urn:CustomerService findDeviceById"`

	In0 string `xml:"in0,omitempty" json:"in0,omitempty"`
}

type FindDeviceByIdResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService findDeviceByIdResponse"`

	FindDeviceByIdReturn *Device `xml:"findDeviceByIdReturn,omitempty" json:"findDeviceByIdReturn,omitempty"`
}

type FindDeviceByMac struct {
	XMLName xml.Name `xml:"urn:CustomerService findDeviceByMac"`

	In0 string `xml:"in0,omitempty" json:"in0,omitempty"`
}

type FindDeviceByMacResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService findDeviceByMacResponse"`

	FindDeviceByMacReturn *Device `xml:"findDeviceByMacReturn,omitempty" json:"findDeviceByMacReturn,omitempty"`
}

type FindDeviceBySerial struct {
	XMLName xml.Name `xml:"urn:CustomerService findDeviceBySerial"`

	In0 string `xml:"in0,omitempty" json:"in0,omitempty"`
}

type FindDeviceBySerialResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService findDeviceBySerialResponse"`

	FindDeviceBySerialReturn *Device `xml:"findDeviceBySerialReturn,omitempty" json:"findDeviceBySerialReturn,omitempty"`
}

type FindDevicesByCustomerId struct {
	XMLName xml.Name `xml:"urn:CustomerService findDevicesByCustomerId"`

	In0 string `xml:"in0,omitempty" json:"in0,omitempty"`
}

type FindDevicesByCustomerIdResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService findDevicesByCustomerIdResponse"`

	FindDevicesByCustomerIdReturn []*Device `xml:"findDevicesByCustomerIdReturn,omitempty" json:"findDevicesByCustomerIdReturn,omitempty"`
}

type FindDevicesByType struct {
	XMLName xml.Name `xml:"urn:CustomerService findDevicesByType"`

	In0 string `xml:"in0,omitempty" json:"in0,omitempty"`
}

type FindDevicesByTypeResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService findDevicesByTypeResponse"`

	FindDevicesByTypeReturn []*Device `xml:"findDevicesByTypeReturn,omitempty" json:"findDevicesByTypeReturn,omitempty"`
}

type QueryDeviceWithXmpp struct {
	XMLName xml.Name `xml:"urn:CustomerService queryDeviceWithXmpp"`

	Mac string `xml:"mac,omitempty" json:"mac,omitempty"`

	QueryType string `xml:"queryType,omitempty" json:"queryType,omitempty"`

	JsonParam string `xml:"jsonParam,omitempty" json:"jsonParam,omitempty"`
}

type QueryDeviceWithXmppReturn string

type FindCustomerIdsWithCustomerPropertyValue struct {
	XMLName xml.Name `xml:"urn:CustomerService findCustomerIdsWithCustomerPropertyValue"`

	Key string `xml:"key,omitempty" json:"key,omitempty"`

	Value string `xml:"value,omitempty" json:"value,omitempty"`
}

type FindCustomerIdsWithCustomerPropertyValueResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService findCustomerIdsWithCustomerPropertyValueResponse"`

	CustomerId []string `xml:"customerId,omitempty" json:"customerId,omitempty"`
}

type FindDeployedWidgetsByDeviceId struct {
	XMLName xml.Name `xml:"urn:CustomerService findDeployedWidgetsByDeviceId"`

	In0 string `xml:"in0,omitempty" json:"in0,omitempty"`
}

type FindDeployedWidgetsByDeviceIdResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService findDeployedWidgetsByDeviceIdResponse"`

	FindDeployedWidgetsByDeviceIdReturn []*WidgetDeployment `xml:"findDeployedWidgetsByDeviceIdReturn,omitempty" json:"findDeployedWidgetsByDeviceIdReturn,omitempty"`
}

type CreateLocation struct {
	XMLName xml.Name `xml:"urn:CustomerService createLocation"`

	In0 *Location `xml:"in0,omitempty" json:"in0,omitempty"`
}

type CreateLocationResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService createLocationResponse"`

	CreateLocationReturn *ServiceStatus `xml:"createLocationReturn,omitempty" json:"createLocationReturn,omitempty"`
}

type ArchiveLocation struct {
	XMLName xml.Name `xml:"urn:CustomerService archiveLocation"`

	In0 *Location `xml:"in0,omitempty" json:"in0,omitempty"`
}

type ArchiveLocationResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService archiveLocationResponse"`

	ArchiveLocationReturn *ServiceStatus `xml:"archiveLocationReturn,omitempty" json:"archiveLocationReturn,omitempty"`
}

type DeleteLocation struct {
	XMLName xml.Name `xml:"urn:CustomerService deleteLocation"`

	In0 *Location `xml:"in0,omitempty" json:"in0,omitempty"`
}

type DeleteLocationResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService deleteLocationResponse"`

	DeleteLocationReturn *ServiceStatus `xml:"deleteLocationReturn,omitempty" json:"deleteLocationReturn,omitempty"`
}

type FindLocationById struct {
	XMLName xml.Name `xml:"urn:CustomerService findLocationById"`

	In0 string `xml:"in0,omitempty" json:"in0,omitempty"`
}

type FindLocationByIdResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService findLocationByIdResponse"`

	FindLocationByIdReturn *Location `xml:"findLocationByIdReturn,omitempty" json:"findLocationByIdReturn,omitempty"`
}

type FindLocationsByStreet struct {
	XMLName xml.Name `xml:"urn:CustomerService findLocationsByStreet"`

	In0 string `xml:"in0,omitempty" json:"in0,omitempty"`
}

type FindLocationsByStreetResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService findLocationsByStreetResponse"`

	FindLocationsByStreetReturn []*Location `xml:"findLocationsByStreetReturn,omitempty" json:"findLocationsByStreetReturn,omitempty"`
}

type FindLocationsByZip struct {
	XMLName xml.Name `xml:"urn:CustomerService findLocationsByZip"`

	In0 string `xml:"in0,omitempty" json:"in0,omitempty"`
}

type FindLocationsByZipResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService findLocationsByZipResponse"`

	FindLocationsByZipReturn []*Location `xml:"findLocationsByZipReturn,omitempty" json:"findLocationsByZipReturn,omitempty"`
}

type FindWebLoginsByCustomerId struct {
	XMLName xml.Name `xml:"urn:CustomerService findWebLoginsByCustomerId"`

	CustomerId string `xml:"customerId,omitempty" json:"customerId,omitempty"`
}

type FindWebLoginsByCustomerIdResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService findWebLoginsByCustomerIdResponse"`

	FindWebLoginsByCustomerIdReturn []*WebLogin `xml:"findWebLoginsByCustomerIdReturn,omitempty" json:"findWebLoginsByCustomerIdReturn,omitempty"`
}

type CreateProductSubscription struct {
	XMLName xml.Name `xml:"urn:CustomerService createProductSubscription"`

	In0 *ProductSubscription `xml:"in0,omitempty" json:"in0,omitempty"`
}

type CreateProductSubscriptionResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService createProductSubscriptionResponse"`

	CreateProductSubscriptionReturn *ServiceStatus `xml:"createProductSubscriptionReturn,omitempty" json:"createProductSubscriptionReturn,omitempty"`
}

type UpdateProductSubscription struct {
	XMLName xml.Name `xml:"urn:CustomerService updateProductSubscription"`

	In0 *ProductSubscription4Updating `xml:"in0,omitempty" json:"in0,omitempty"`
}

type UpdateProductSubscriptionResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService updateProductSubscriptionResponse"`

	UpdateProductSubscriptionReturn *ServiceStatus `xml:"updateProductSubscriptionReturn,omitempty" json:"updateProductSubscriptionReturn,omitempty"`
}

type DeleteProductSubscription struct {
	XMLName xml.Name `xml:"urn:CustomerService deleteProductSubscription"`

	In0 *ProductSubscription4Updating `xml:"in0,omitempty" json:"in0,omitempty"`
}

type DeleteProductSubscriptionResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService deleteProductSubscriptionResponse"`

	DeleteProductSubscriptionReturn *ServiceStatus `xml:"deleteProductSubscriptionReturn,omitempty" json:"deleteProductSubscriptionReturn,omitempty"`
}

type DeleteProductSubscriptionById struct {
	XMLName xml.Name `xml:"urn:CustomerService deleteProductSubscriptionById"`

	In0 string `xml:"in0,omitempty" json:"in0,omitempty"`
}

type DeleteProductSubscriptionByIdResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService deleteProductSubscriptionByIdResponse"`

	DeleteProductSubscriptionByIdReturn *ServiceStatus `xml:"deleteProductSubscriptionByIdReturn,omitempty" json:"deleteProductSubscriptionByIdReturn,omitempty"`
}

type ArchiveProductSubscription struct {
	XMLName xml.Name `xml:"urn:CustomerService archiveProductSubscription"`

	In0 *ProductSubscription4Updating `xml:"in0,omitempty" json:"in0,omitempty"`
}

type ArchiveProductSubscriptionResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService archiveProductSubscriptionResponse"`

	ArchiveProductSubscriptionReturn *ServiceStatus `xml:"archiveProductSubscriptionReturn,omitempty" json:"archiveProductSubscriptionReturn,omitempty"`
}

type FindProductSubscriptionsByCustomerId struct {
	XMLName xml.Name `xml:"urn:CustomerService findProductSubscriptionsByCustomerId"`

	In0 string `xml:"in0,omitempty" json:"in0,omitempty"`
}

type FindProductSubscriptionsByCustomerIdResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService findProductSubscriptionsByCustomerIdResponse"`

	FindProductSubscriptionsByCustomerIdReturn []*ProductSubscription `xml:"findProductSubscriptionsByCustomerIdReturn,omitempty" json:"findProductSubscriptionsByCustomerIdReturn,omitempty"`
}

type FindAllProductSubscriptionsByCustomerId struct {
	XMLName xml.Name `xml:"urn:CustomerService findAllProductSubscriptionsByCustomerId"`

	In0 string `xml:"in0,omitempty" json:"in0,omitempty"`
}

type FindAllProductSubscriptionsByCustomerIdResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService findAllProductSubscriptionsByCustomerIdResponse"`

	FindAllProductSubscriptionsByCustomerIdReturn []*SubscriptionInfo `xml:"findAllProductSubscriptionsByCustomerIdReturn,omitempty" json:"findAllProductSubscriptionsByCustomerIdReturn,omitempty"`
}

type FindProductSubscriptionById struct {
	XMLName xml.Name `xml:"urn:CustomerService findProductSubscriptionById"`

	In0 string `xml:"in0,omitempty" json:"in0,omitempty"`
}

type FindProductSubscriptionByIdResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService findProductSubscriptionByIdResponse"`

	FindProductSubscriptionByIdReturn *ProductSubscription `xml:"findProductSubscriptionByIdReturn,omitempty" json:"findProductSubscriptionByIdReturn,omitempty"`
}

type FindProductSubscriptionAlsoArchivedById struct {
	XMLName xml.Name `xml:"urn:CustomerService findProductSubscriptionAlsoArchivedById"`

	In0 string `xml:"in0,omitempty" json:"in0,omitempty"`
}

type FindProductSubscriptionAlsoArchivedByIdResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService findProductSubscriptionAlsoArchivedByIdResponse"`

	FindProductSubscriptionAlsoArchivedByIdReturn *ProductSubscription `xml:"findProductSubscriptionAlsoArchivedByIdReturn,omitempty" json:"findProductSubscriptionAlsoArchivedByIdReturn,omitempty"`
}

type AccountProvisioning struct {
	XMLName xml.Name `xml:"urn:CustomerService accountProvisioning"`

	In0 *AccountProvision `xml:"in0,omitempty" json:"in0,omitempty"`
}

type AccountProvisioningResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService accountProvisioningResponse"`

	AccountProvisioningReturn *ServiceStatus `xml:"accountProvisioningReturn,omitempty" json:"accountProvisioningReturn,omitempty"`
}

type ManageAccount struct {
	XMLName xml.Name `xml:"urn:CustomerService manageAccount"`

	In0 *AccountManager `xml:"in0,omitempty" json:"in0,omitempty"`
}

type ManageAccountResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService manageAccountResponse"`

	ManageAccountReturn *ServiceStatus `xml:"manageAccountReturn,omitempty" json:"manageAccountReturn,omitempty"`
}

type UpdateLocation struct {
	XMLName xml.Name `xml:"urn:CustomerService updateLocation"`

	In0 *Location `xml:"in0,omitempty" json:"in0,omitempty"`
}

type UpdateLocationResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService updateLocationResponse"`

	UpdateLocationReturn *ServiceStatus `xml:"updateLocationReturn,omitempty" json:"updateLocationReturn,omitempty"`
}

type FindDevicePropertiesByDeviceId struct {
	XMLName xml.Name `xml:"urn:CustomerService findDevicePropertiesByDeviceId"`

	DeviceId string `xml:"deviceId,omitempty" json:"deviceId,omitempty"`
}

type FindDevicePropertiesByDeviceIdResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService findDevicePropertiesByDeviceIdResponse"`

	FindDevicePropertiesByDeviceIdReturn []*DeviceProperty `xml:"findDevicePropertiesByDeviceIdReturn,omitempty" json:"findDevicePropertiesByDeviceIdReturn,omitempty"`
}

type FindDevicePropertyByDeviceIdAndPropertyKey struct {
	XMLName xml.Name `xml:"urn:CustomerService findDevicePropertyByDeviceIdAndPropertyKey"`

	DeviceId string `xml:"deviceId,omitempty" json:"deviceId,omitempty"`

	PropertyKey string `xml:"propertyKey,omitempty" json:"propertyKey,omitempty"`
}

type FindDevicePropertyByDeviceIdAndPropertyKeyResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService findDevicePropertyByDeviceIdAndPropertyKeyResponse"`

	FindDevicePropertyByDeviceIdAndPropertyKeyReturn *DeviceProperty `xml:"findDevicePropertyByDeviceIdAndPropertyKeyReturn,omitempty" json:"findDevicePropertyByDeviceIdAndPropertyKeyReturn,omitempty"`
}

type CreateDeviceProperty struct {
	XMLName xml.Name `xml:"urn:CustomerService createDeviceProperty"`

	CustomerProperty *DeviceProperty `xml:"customerProperty,omitempty" json:"customerProperty,omitempty"`
}

type CreateDevicePropertyResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService createDevicePropertyResponse"`

	CreateDevicePropertyReturn *ServiceStatus `xml:"createDevicePropertyReturn,omitempty" json:"createDevicePropertyReturn,omitempty"`
}

type UpdateDeviceProperty struct {
	XMLName xml.Name `xml:"urn:CustomerService updateDeviceProperty"`

	CustomerProperty *DeviceProperty `xml:"customerProperty,omitempty" json:"customerProperty,omitempty"`
}

type UpdateDevicePropertyResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService updateDevicePropertyResponse"`

	UpdateDevicePropertyReturn *ServiceStatus `xml:"updateDevicePropertyReturn,omitempty" json:"updateDevicePropertyReturn,omitempty"`
}

type DeleteDeviceProperty struct {
	XMLName xml.Name `xml:"urn:CustomerService deleteDeviceProperty"`

	CustomerProperty *DeviceProperty `xml:"customerProperty,omitempty" json:"customerProperty,omitempty"`
}

type DeleteDevicePropertyResponse struct {
	XMLName xml.Name `xml:"urn:CustomerService deleteDevicePropertyResponse"`

	DeleteDevicePropertyReturn *ServiceStatus `xml:"deleteDevicePropertyReturn,omitempty" json:"deleteDevicePropertyReturn,omitempty"`
}

type CustomerProperty struct {
	CustomerId string `xml:"customerId,omitempty" json:"customerId,omitempty"`

	Key string `xml:"key,omitempty" json:"key,omitempty"`

	Value string `xml:"value,omitempty" json:"value,omitempty"`
}

type DeviceProperty struct {
	DeviceId string `xml:"deviceId,omitempty" json:"deviceId,omitempty"`

	Key string `xml:"key,omitempty" json:"key,omitempty"`

	Value string `xml:"value,omitempty" json:"value,omitempty"`
}

type EmailContact struct {
	EmailAddress string `xml:"emailAddress,omitempty" json:"emailAddress,omitempty"`

	EmailContactId string `xml:"emailContactId,omitempty" json:"emailContactId,omitempty"`

	Type_ string `xml:"type,omitempty" json:"type,omitempty"`
}

type PhoneContact struct {
	PhoneContactId string `xml:"phoneContactId,omitempty" json:"phoneContactId,omitempty"`

	Phonenumber string `xml:"phonenumber,omitempty" json:"phonenumber,omitempty"`

	Type_ string `xml:"type,omitempty" json:"type,omitempty"`
}

type Customer struct {
	ActivationCode          string        `xml:"activationCode,omitempty" json:"activationCode,omitempty"`
	Created                 time.Time     `xml:"created,omitempty" json:"created,omitempty"`
	CustomerGroupIds        []string      `xml:"customerGroupIds,omitempty" json:"customerGroupIds,omitempty"`
	CustomerId              string        `xml:"customerId,omitempty" json:"customerId,omitempty"`
	DeviceIds               []string      `xml:"deviceIds,omitempty" json:"deviceIds,omitempty"`
	EmailContacts           *EmailContact `xml:"emailContacts,omitempty" json:"emailContacts,omitempty"`
	FirstName               string        `xml:"firstName,omitempty" json:"firstName,omitempty"`
	InstallationLocationIds []string      `xml:"installationLocationIds,omitempty" json:"installationLocationIds,omitempty"`
	LocationId              string        `xml:"locationId,omitempty" json:"locationId,omitempty"`
	MiddleName              string        `xml:"middleName,omitempty" json:"middleName,omitempty"`
	PhoneContacts           *PhoneContact `xml:"phoneContacts,omitempty" json:"phoneContacts,omitempty"`
	PinCode                 string        `xml:"pinCode,omitempty" json:"pinCode,omitempty"`
	PurchaseCode            string        `xml:"purchaseCode,omitempty" json:"purchaseCode,omitempty"`
	StbProvisioningCode     string        `xml:"stbProvisioningCode,omitempty" json:"stbProvisioningCode,omitempty"`
	SurName                 string        `xml:"surName,omitempty" json:"surName,omitempty"`
	Updated                 time.Time     `xml:"updated,omitempty" json:"updated,omitempty"`
}

type CustomerCRUD struct {
	Action *CRUDactionType `xml:"action,omitempty" json:"action,omitempty"`

	ActivationCode string `xml:"activationCode,omitempty" json:"activationCode,omitempty"`

	Created time.Time `xml:"created,omitempty" json:"created,omitempty"`

	CustomerGroupIds []string `xml:"customerGroupIds,omitempty" json:"customerGroupIds,omitempty"`

	CustomerId string `xml:"customerId,omitempty" json:"customerId,omitempty"`

	DeviceIds []string `xml:"deviceIds,omitempty" json:"deviceIds,omitempty"`

	EmailContacts *EmailContact `xml:"emailContacts,omitempty" json:"emailContacts,omitempty"`

	FirstName string `xml:"firstName,omitempty" json:"firstName,omitempty"`

	InstallationLocationIds []string `xml:"installationLocationIds,omitempty" json:"installationLocationIds,omitempty"`

	LocationId string `xml:"locationId,omitempty" json:"locationId,omitempty"`

	MiddleName string `xml:"middleName,omitempty" json:"middleName,omitempty"`

	PhoneContacts *PhoneContact `xml:"phoneContacts,omitempty" json:"phoneContacts,omitempty"`

	PinCode string `xml:"pinCode,omitempty" json:"pinCode,omitempty"`

	PurchaseCode string `xml:"purchaseCode,omitempty" json:"purchaseCode,omitempty"`

	StbProvisioningCode string `xml:"stbProvisioningCode,omitempty" json:"stbProvisioningCode,omitempty"`

	SurName string `xml:"surName,omitempty" json:"surName,omitempty"`

	Updated time.Time `xml:"updated,omitempty" json:"updated,omitempty"`
}

type IdAndTimestamp struct {
	Id string `xml:"id,omitempty" json:"id,omitempty"`

	Updated time.Time `xml:"updated,omitempty" json:"updated,omitempty"`
}

type CustomerGroup struct {
	Created time.Time `xml:"created,omitempty" json:"created,omitempty"`

	CustomerGroupAssignedType string `xml:"customerGroupAssignedType,omitempty" json:"customerGroupAssignedType,omitempty"`

	CustomerGroupId string `xml:"customerGroupId,omitempty" json:"customerGroupId,omitempty"`

	CustomergroupType string `xml:"customergroupType,omitempty" json:"customergroupType,omitempty"`

	Description string `xml:"description,omitempty" json:"description,omitempty"`

	InternalComment string `xml:"internalComment,omitempty" json:"internalComment,omitempty"`

	Members []*Customer `xml:"members,omitempty" json:"members,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	Priorityorder string `xml:"priorityorder,omitempty" json:"priorityorder,omitempty"`

	Updated time.Time `xml:"updated,omitempty" json:"updated,omitempty"`
}

type Device struct {
	BootImage string `xml:"bootImage,omitempty" json:"bootImage,omitempty"`

	BuildDate string `xml:"buildDate,omitempty" json:"buildDate,omitempty"`

	BuildVersion string `xml:"buildVersion,omitempty" json:"buildVersion,omitempty"`

	Created time.Time `xml:"created,omitempty" json:"created,omitempty"`

	CustomerId string `xml:"customerId,omitempty" json:"customerId,omitempty"`

	DeviceId string `xml:"deviceId,omitempty" json:"deviceId,omitempty"`

	FirmwareVersion string `xml:"firmwareVersion,omitempty" json:"firmwareVersion,omitempty"`

	FokusOnVersion string `xml:"fokusOnVersion,omitempty" json:"fokusOnVersion,omitempty"`

	Ip string `xml:"ip,omitempty" json:"ip,omitempty"`

	LastSeen time.Time `xml:"lastSeen,omitempty" json:"lastSeen,omitempty"`

	Mac string `xml:"mac,omitempty" json:"mac,omitempty"`

	Model string `xml:"model,omitempty" json:"model,omitempty"`

	RegisteredFirst time.Time `xml:"registeredFirst,omitempty" json:"registeredFirst,omitempty"`

	RegisteredLast time.Time `xml:"registeredLast,omitempty" json:"registeredLast,omitempty"`

	Serial string `xml:"serial,omitempty" json:"serial,omitempty"`

	SubTypes []string `xml:"subTypes,omitempty" json:"subTypes,omitempty"`

	Type_ string `xml:"type,omitempty" json:"type,omitempty"`

	Updated time.Time `xml:"updated,omitempty" json:"updated,omitempty"`
}

type DeviceCRUD struct {
	Action *CRUDactionType `xml:"action,omitempty" json:"action,omitempty"`

	Created time.Time `xml:"created,omitempty" json:"created,omitempty"`

	CustomerId string `xml:"customerId,omitempty" json:"customerId,omitempty"`

	DeviceId string `xml:"deviceId,omitempty" json:"deviceId,omitempty"`

	Mac string `xml:"mac,omitempty" json:"mac,omitempty"`

	RegisteredFirst time.Time `xml:"registeredFirst,omitempty" json:"registeredFirst,omitempty"`

	RegisteredLast time.Time `xml:"registeredLast,omitempty" json:"registeredLast,omitempty"`

	Serial string `xml:"serial,omitempty" json:"serial,omitempty"`

	Type_ string `xml:"type,omitempty" json:"type,omitempty"`

	Updated time.Time `xml:"updated,omitempty" json:"updated,omitempty"`
}

type Location struct {
	City string `xml:"city,omitempty" json:"city,omitempty"`

	Country string `xml:"country,omitempty" json:"country,omitempty"`

	// Created time.Time `xml:"created,omitempty" json:"created,omitempty"`

	Floor string `xml:"floor,omitempty" json:"floor,omitempty"`

	FloorUnit string `xml:"floorUnit,omitempty" json:"floorUnit,omitempty"`

	HouseNumber string `xml:"houseNumber,omitempty" json:"houseNumber,omitempty"`

	LocationId string `xml:"locationId,omitempty" json:"locationId,omitempty"`

	PlaceName string `xml:"placeName,omitempty" json:"placeName,omitempty"`

	Street string `xml:"street,omitempty" json:"street,omitempty"`

	// Updated time.Time `xml:"updated,omitempty" json:"updated,omitempty"`

	ZipCode string `xml:"zipCode,omitempty" json:"zipCode,omitempty"`
}

type LocationCRUD struct {
	Action *CRUDactionType `xml:"action,omitempty" json:"action,omitempty"`

	City string `xml:"city,omitempty" json:"city,omitempty"`

	Country string `xml:"country,omitempty" json:"country,omitempty"`

	Created time.Time `xml:"created,omitempty" json:"created,omitempty"`

	Floor string `xml:"floor,omitempty" json:"floor,omitempty"`

	FloorUnit string `xml:"floorUnit,omitempty" json:"floorUnit,omitempty"`

	HouseNumber string `xml:"houseNumber,omitempty" json:"houseNumber,omitempty"`

	LocationId string `xml:"locationId,omitempty" json:"locationId,omitempty"`

	PlaceName string `xml:"placeName,omitempty" json:"placeName,omitempty"`

	Street string `xml:"street,omitempty" json:"street,omitempty"`

	Updated time.Time `xml:"updated,omitempty" json:"updated,omitempty"`

	ZipCode string `xml:"zipCode,omitempty" json:"zipCode,omitempty"`
}

type ProductSubscription4Updating struct {
	Count int32 `xml:"count,omitempty" json:"count,omitempty"`

	Created time.Time `xml:"created,omitempty" json:"created,omitempty"`

	CustomerId string `xml:"customerId,omitempty" json:"customerId,omitempty"`

	EndTime time.Time `xml:"endTime,omitempty" json:"endTime,omitempty"`

	ProductName string `xml:"productName,omitempty" json:"productName,omitempty"`

	ProductSubscriptionId string `xml:"productSubscriptionId,omitempty" json:"productSubscriptionId,omitempty"`

	ServiceName string `xml:"serviceName,omitempty" json:"serviceName,omitempty"`

	StartTime time.Time `xml:"startTime,omitempty" json:"startTime,omitempty"`

	State string `xml:"state,omitempty" json:"state,omitempty"`

	Updated time.Time `xml:"updated,omitempty" json:"updated,omitempty"`

	Variant string `xml:"variant,omitempty" json:"variant,omitempty"`
}

type ProductSubscription4UpdatingCRUD struct {
	Action *CRUDactionType `xml:"action,omitempty" json:"action,omitempty"`

	Count int32 `xml:"count,omitempty" json:"count,omitempty"`

	Created time.Time `xml:"created,omitempty" json:"created,omitempty"`

	CustomerId string `xml:"customerId,omitempty" json:"customerId,omitempty"`

	EndTime time.Time `xml:"endTime,omitempty" json:"endTime,omitempty"`

	ProductName string `xml:"productName,omitempty" json:"productName,omitempty"`

	ProductSubscriptionId string `xml:"productSubscriptionId,omitempty" json:"productSubscriptionId,omitempty"`

	ServiceName string `xml:"serviceName,omitempty" json:"serviceName,omitempty"`

	StartTime time.Time `xml:"startTime,omitempty" json:"startTime,omitempty"`

	State string `xml:"state,omitempty" json:"state,omitempty"`

	Updated time.Time `xml:"updated,omitempty" json:"updated,omitempty"`

	Variant string `xml:"variant,omitempty" json:"variant,omitempty"`
}

type ProductSubscription struct {
	Count int32 `xml:"count,omitempty" json:"count,omitempty"`

	// Created time.Time `xml:"created,omitempty" json:"created,omitempty"`

	CustomerId string `xml:"customerId,omitempty" json:"customerId,omitempty"`

	// EndTime time.Time `xml:"endTime,omitempty" json:"endTime,omitempty"`

	ProductName string `xml:"productName,omitempty" json:"productName,omitempty"`

	ProductSubscriptionId string `xml:"productSubscriptionId,omitempty" json:"productSubscriptionId,omitempty"`

	ServiceName string `xml:"serviceName,omitempty" json:"serviceName,omitempty"`

	StartTime time.Time `xml:"startTime,omitempty" json:"startTime,omitempty"`

	State string `xml:"state,omitempty" json:"state,omitempty"`

	// Updated time.Time `xml:"updated,omitempty" json:"updated,omitempty"`

	Variant string `xml:"variant,omitempty" json:"variant,omitempty"`
}

type SubscriptionInfo struct {
	CustomerId string `xml:"customerId,omitempty" json:"customerId,omitempty"`

	EndTime time.Time `xml:"endTime,omitempty" json:"endTime,omitempty"`

	ProductName string `xml:"productName,omitempty" json:"productName,omitempty"`

	ProductSubscriptionId string `xml:"productSubscriptionId,omitempty" json:"productSubscriptionId,omitempty"`

	ServiceName string `xml:"serviceName,omitempty" json:"serviceName,omitempty"`

	StartTime time.Time `xml:"startTime,omitempty" json:"startTime,omitempty"`

	State string `xml:"state,omitempty" json:"state,omitempty"`

	SubscriptionType string `xml:"subscriptionType,omitempty" json:"subscriptionType,omitempty"`

	Variant string `xml:"variant,omitempty" json:"variant,omitempty"`
}

type AccountProvision struct {
	Archive bool `xml:"archive,omitempty" json:"archive,omitempty"`

	Customer *Customer `xml:"customer,omitempty" json:"customer,omitempty"`

	Device []*Device `xml:"device,omitempty" json:"device,omitempty"`

	Location []*Location `xml:"location,omitempty" json:"location,omitempty"`

	ProductSubscription []*ProductSubscription `xml:"productSubscription,omitempty" json:"productSubscription,omitempty"`
}

type AccountManager struct {
	Archive bool `xml:"archive,omitempty" json:"archive,omitempty"`

	Customer *CustomerCRUD `xml:"customer,omitempty" json:"customer,omitempty"`

	Device []*DeviceCRUD `xml:"device,omitempty" json:"device,omitempty"`

	Location []*LocationCRUD `xml:"location,omitempty" json:"location,omitempty"`

	ProductSubscription []*ProductSubscription4UpdatingCRUD `xml:"productSubscription,omitempty" json:"productSubscription,omitempty"`
}

type WidgetDeployment struct {
	ClientRequirements string `xml:"clientRequirements,omitempty" json:"clientRequirements,omitempty"`

	DefaultLanguage string `xml:"defaultLanguage,omitempty" json:"defaultLanguage,omitempty"`

	Hotkey string `xml:"hotkey,omitempty" json:"hotkey,omitempty"`

	Lockable bool `xml:"lockable,omitempty" json:"lockable,omitempty"`

	SkinName string `xml:"skinName,omitempty" json:"skinName,omitempty"`

	StopLiveThreshold int32 `xml:"stopLiveThreshold,omitempty" json:"stopLiveThreshold,omitempty"`

	Updated time.Time `xml:"updated,omitempty" json:"updated,omitempty"`

	Widget *Widget `xml:"widget,omitempty" json:"widget,omitempty"`
}

type Widget struct {
	BuildInfo string `xml:"buildInfo,omitempty" json:"buildInfo,omitempty"`

	Created time.Time `xml:"created,omitempty" json:"created,omitempty"`

	CssClass string `xml:"cssClass,omitempty" json:"cssClass,omitempty"`

	DefaultAspect string `xml:"defaultAspect,omitempty" json:"defaultAspect,omitempty"`

	Description string `xml:"description,omitempty" json:"description,omitempty"`

	HtmlId string `xml:"htmlId,omitempty" json:"htmlId,omitempty"`

	LogEvents bool `xml:"logEvents,omitempty" json:"logEvents,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	PackagePath string `xml:"packagePath,omitempty" json:"packagePath,omitempty"`

	Updated time.Time `xml:"updated,omitempty" json:"updated,omitempty"`

	Version int64 `xml:"version,omitempty" json:"version,omitempty"`

	WidgetDeployType string `xml:"widgetDeployType,omitempty" json:"widgetDeployType,omitempty"`
}

type WebLogin struct {
	Cancelled time.Time `xml:"cancelled,omitempty" json:"cancelled,omitempty"`

	Created time.Time `xml:"created,omitempty" json:"created,omitempty"`

	CustomerId string `xml:"customerId,omitempty" json:"customerId,omitempty"`

	Email string `xml:"email,omitempty" json:"email,omitempty"`

	EmailConfirmed time.Time `xml:"emailConfirmed,omitempty" json:"emailConfirmed,omitempty"`

	PasswordChanged time.Time `xml:"passwordChanged,omitempty" json:"passwordChanged,omitempty"`

	Username string `xml:"username,omitempty" json:"username,omitempty"`
}

type ServiceStatus struct {
	Message string `xml:"message,omitempty" json:"message,omitempty"`

	ReferenceId string `xml:"referenceId,omitempty" json:"referenceId,omitempty"`

	Role string `xml:"role,omitempty" json:"role,omitempty"`

	StatusCode string `xml:"statusCode,omitempty" json:"statusCode,omitempty"`

	StatusSubCode string `xml:"statusSubCode,omitempty" json:"statusSubCode,omitempty"`
}

type ServiceFault struct {
	XMLName xml.Name `xml:"urn:CustomerService fault"`
}

type CustomerWebServiceEndPoint interface {

	// Error can be either of the following types:
	//
	//   - ServiceFault

	FindCustomerPropertiesByCustomerId(request *FindCustomerPropertiesByCustomerId) (*FindCustomerPropertiesByCustomerIdResponse, error)

	FindCustomerPropertiesByCustomerIdContext(ctx context.Context, request *FindCustomerPropertiesByCustomerId) (*FindCustomerPropertiesByCustomerIdResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	FindCustomerPropertyByCustomerIdAndPropertyKey(request *FindCustomerPropertyByCustomerIdAndPropertyKey) (*FindCustomerPropertyByCustomerIdAndPropertyKeyResponse, error)

	FindCustomerPropertyByCustomerIdAndPropertyKeyContext(ctx context.Context, request *FindCustomerPropertyByCustomerIdAndPropertyKey) (*FindCustomerPropertyByCustomerIdAndPropertyKeyResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	CreateCustomerProperty(request *CreateCustomerProperty) (*CreateCustomerPropertyResponse, error)

	CreateCustomerPropertyContext(ctx context.Context, request *CreateCustomerProperty) (*CreateCustomerPropertyResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	UpdateCustomerProperty(request *UpdateCustomerProperty) (*UpdateCustomerPropertyResponse, error)

	UpdateCustomerPropertyContext(ctx context.Context, request *UpdateCustomerProperty) (*UpdateCustomerPropertyResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	DeleteCustomerProperty(request *DeleteCustomerProperty) (*DeleteCustomerPropertyResponse, error)

	DeleteCustomerPropertyContext(ctx context.Context, request *DeleteCustomerProperty) (*DeleteCustomerPropertyResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	FindDevicePropertiesByDeviceId(request *FindDevicePropertiesByDeviceId) (*FindDevicePropertiesByDeviceIdResponse, error)

	FindDevicePropertiesByDeviceIdContext(ctx context.Context, request *FindDevicePropertiesByDeviceId) (*FindDevicePropertiesByDeviceIdResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	FindDevicePropertyByDeviceIdAndPropertyKey(request *FindDevicePropertyByDeviceIdAndPropertyKey) (*FindDevicePropertyByDeviceIdAndPropertyKeyResponse, error)

	FindDevicePropertyByDeviceIdAndPropertyKeyContext(ctx context.Context, request *FindDevicePropertyByDeviceIdAndPropertyKey) (*FindDevicePropertyByDeviceIdAndPropertyKeyResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	CreateDeviceProperty(request *CreateDeviceProperty) (*CreateDevicePropertyResponse, error)

	CreateDevicePropertyContext(ctx context.Context, request *CreateDeviceProperty) (*CreateDevicePropertyResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	UpdateDeviceProperty(request *UpdateDeviceProperty) (*UpdateDevicePropertyResponse, error)

	UpdateDevicePropertyContext(ctx context.Context, request *UpdateDeviceProperty) (*UpdateDevicePropertyResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	DeleteDeviceProperty(request *DeleteDeviceProperty) (*DeleteDevicePropertyResponse, error)

	DeleteDevicePropertyContext(ctx context.Context, request *DeleteDeviceProperty) (*DeleteDevicePropertyResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	CreateCustomer(request *CreateCustomer) (*CreateCustomerResponse, error)

	CreateCustomerContext(ctx context.Context, request *CreateCustomer) (*CreateCustomerResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	UpdateCustomer(request *UpdateCustomer) (*UpdateCustomerResponse, error)

	UpdateCustomerContext(ctx context.Context, request *UpdateCustomer) (*UpdateCustomerResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	ArchiveCustomer(request *ArchiveCustomer) (*ArchiveCustomerResponse, error)

	ArchiveCustomerContext(ctx context.Context, request *ArchiveCustomer) (*ArchiveCustomerResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	DeleteCustomer(request *DeleteCustomer) (*DeleteCustomerResponse, error)

	DeleteCustomerContext(ctx context.Context, request *DeleteCustomer) (*DeleteCustomerResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	FindCustomerById(request *FindCustomerById) (*FindCustomerByIdResponse, error)

	FindCustomerByIdContext(ctx context.Context, request *FindCustomerById) (*FindCustomerByIdResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	FindCustomersBySurName(request *FindCustomersBySurName) (*FindCustomersBySurNameResponse, error)

	FindCustomersBySurNameContext(ctx context.Context, request *FindCustomersBySurName) (*FindCustomersBySurNameResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	FindCustomersByCustomerGroupId(request *FindCustomersByCustomerGroupId) (*FindCustomersByCustomerGroupIdResponse, error)

	FindCustomersByCustomerGroupIdContext(ctx context.Context, request *FindCustomersByCustomerGroupId) (*FindCustomersByCustomerGroupIdResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	FindCustomersByLocationId(request *FindCustomersByLocationId) (*FindCustomersByLocationIdResponse, error)

	FindCustomersByLocationIdContext(ctx context.Context, request *FindCustomersByLocationId) (*FindCustomersByLocationIdResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	FindCustomerIdsAndTimestampByCustomerIdLikeMask(request *FindCustomerIdsAndTimestampByCustomerIdLikeMask) (*FindCustomerIdsAndTimestampByCustomerIdLikeMaskResponse, error)

	FindCustomerIdsAndTimestampByCustomerIdLikeMaskContext(ctx context.Context, request *FindCustomerIdsAndTimestampByCustomerIdLikeMask) (*FindCustomerIdsAndTimestampByCustomerIdLikeMaskResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	FindCustomerGroupIdsAndTimestampByCustomerGroupIdLikeMask(request *FindCustomerGroupIdsAndTimestampByCustomerGroupIdLikeMask) (*FindCustomerGroupIdsAndTimestampByCustomerGroupIdLikeMaskResponse, error)

	FindCustomerGroupIdsAndTimestampByCustomerGroupIdLikeMaskContext(ctx context.Context, request *FindCustomerGroupIdsAndTimestampByCustomerGroupIdLikeMask) (*FindCustomerGroupIdsAndTimestampByCustomerGroupIdLikeMaskResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	FindLocationIdsAndTimestampByLocationIdLikeMask(request *FindLocationIdsAndTimestampByLocationIdLikeMask) (*FindLocationIdsAndTimestampByLocationIdLikeMaskResponse, error)

	FindLocationIdsAndTimestampByLocationIdLikeMaskContext(ctx context.Context, request *FindLocationIdsAndTimestampByLocationIdLikeMask) (*FindLocationIdsAndTimestampByLocationIdLikeMaskResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	FindDeviceIdsAndTimestampByDeviceIdLikeMask(request *FindDeviceIdsAndTimestampByDeviceIdLikeMask) (*FindDeviceIdsAndTimestampByDeviceIdLikeMaskResponse, error)

	FindDeviceIdsAndTimestampByDeviceIdLikeMaskContext(ctx context.Context, request *FindDeviceIdsAndTimestampByDeviceIdLikeMask) (*FindDeviceIdsAndTimestampByDeviceIdLikeMaskResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	FindProductSubscriptionIdsAndTimestampByProductSubscriptionIdLikeMask(request *FindProductSubscriptionIdsAndTimestampByProductSubscriptionIdLikeMask) (*FindProductSubscriptionIdsAndTimestampByProductSubscriptionIdLikeMaskResponse, error)

	FindProductSubscriptionIdsAndTimestampByProductSubscriptionIdLikeMaskContext(ctx context.Context, request *FindProductSubscriptionIdsAndTimestampByProductSubscriptionIdLikeMask) (*FindProductSubscriptionIdsAndTimestampByProductSubscriptionIdLikeMaskResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	AddCustomerIdToCustomerGroupId(request *AddCustomerIdToCustomerGroupId) (*AddCustomerIdToCustomerGroupIdResponse, error)

	AddCustomerIdToCustomerGroupIdContext(ctx context.Context, request *AddCustomerIdToCustomerGroupId) (*AddCustomerIdToCustomerGroupIdResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	RemoveCustomerIdFromCustomerGroupId(request *RemoveCustomerIdFromCustomerGroupId) (*RemoveCustomerIdFromCustomerGroupIdResponse, error)

	RemoveCustomerIdFromCustomerGroupIdContext(ctx context.Context, request *RemoveCustomerIdFromCustomerGroupId) (*RemoveCustomerIdFromCustomerGroupIdResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	CreateCustomerGroup(request *CreateCustomerGroup) (*CreateCustomerGroupResponse, error)

	CreateCustomerGroupContext(ctx context.Context, request *CreateCustomerGroup) (*CreateCustomerGroupResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	RebootDeviceByDeviceId(request *RebootDeviceByDeviceId) (*RebootDeviceByDeviceIdResponse, error)

	RebootDeviceByDeviceIdContext(ctx context.Context, request *RebootDeviceByDeviceId) (*RebootDeviceByDeviceIdResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	RebootDevicesByCustomerId(request *RebootDevicesByCustomerId) (*RebootDevicesByCustomerIdResponse, error)

	RebootDevicesByCustomerIdContext(ctx context.Context, request *RebootDevicesByCustomerId) (*RebootDevicesByCustomerIdResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	ReloadPortalByDeviceId(request *ReloadPortalByDeviceId) (*ReloadPortalByDeviceIdResponse, error)

	ReloadPortalByDeviceIdContext(ctx context.Context, request *ReloadPortalByDeviceId) (*ReloadPortalByDeviceIdResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	ReloadPortalsByCustomerId(request *ReloadPortalsByCustomerId) (*ReloadPortalsByCustomerIdResponse, error)

	ReloadPortalsByCustomerIdContext(ctx context.Context, request *ReloadPortalsByCustomerId) (*ReloadPortalsByCustomerIdResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	UpdateProfileLanguageByCustomerId(request *UpdateProfileLanguageByCustomerId) (*UpdateProfileLanguageByCustomerIdResponse, error)

	UpdateProfileLanguageByCustomerIdContext(ctx context.Context, request *UpdateProfileLanguageByCustomerId) (*UpdateProfileLanguageByCustomerIdResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	CreateWebLogin(request *CreateWebLogin) (*CreateWebLoginResponse, error)

	CreateWebLoginContext(ctx context.Context, request *CreateWebLogin) (*CreateWebLoginResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	UpdateWebLogin(request *UpdateWebLogin) (*UpdateWebLoginResponse, error)

	UpdateWebLoginContext(ctx context.Context, request *UpdateWebLogin) (*UpdateWebLoginResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	DeleteWebLogin(request *DeleteWebLogin) (*DeleteWebLoginResponse, error)

	DeleteWebLoginContext(ctx context.Context, request *DeleteWebLogin) (*DeleteWebLoginResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	ResetPincodes(request *ResetPincodes) (*ResetPincodesResponse, error)

	ResetPincodesContext(ctx context.Context, request *ResetPincodes) (*ResetPincodesResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	UpdateCustomerGroup(request *UpdateCustomerGroup) (*UpdateCustomerGroupResponse, error)

	UpdateCustomerGroupContext(ctx context.Context, request *UpdateCustomerGroup) (*UpdateCustomerGroupResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	ArchiveCustomerGroup(request *ArchiveCustomerGroup) (*ArchiveCustomerGroupResponse, error)

	ArchiveCustomerGroupContext(ctx context.Context, request *ArchiveCustomerGroup) (*ArchiveCustomerGroupResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	FindCustomerGroupById(request *FindCustomerGroupById) (*FindCustomerGroupByIdResponse, error)

	FindCustomerGroupByIdContext(ctx context.Context, request *FindCustomerGroupById) (*FindCustomerGroupByIdResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	FindCustomerGroupByName(request *FindCustomerGroupByName) (*FindCustomerGroupByNameResponse, error)

	FindCustomerGroupByNameContext(ctx context.Context, request *FindCustomerGroupByName) (*FindCustomerGroupByNameResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	FindCustomerGroupsByCustomer(request *FindCustomerGroupsByCustomer) (*FindCustomerGroupsByCustomerResponse, error)

	FindCustomerGroupsByCustomerContext(ctx context.Context, request *FindCustomerGroupsByCustomer) (*FindCustomerGroupsByCustomerResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	FindCustomerGroupsByCustomerId(request *FindCustomerGroupsByCustomerId) (*FindCustomerGroupsByCustomerIdResponse, error)

	FindCustomerGroupsByCustomerIdContext(ctx context.Context, request *FindCustomerGroupsByCustomerId) (*FindCustomerGroupsByCustomerIdResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	CreateDevice(request *CreateDevice) (*CreateDeviceResponse, error)

	CreateDeviceContext(ctx context.Context, request *CreateDevice) (*CreateDeviceResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	UpdateDevice(request *UpdateDevice) (*UpdateDeviceResponse, error)

	UpdateDeviceContext(ctx context.Context, request *UpdateDevice) (*UpdateDeviceResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	DeleteDevice(request *DeleteDevice) (*DeleteDeviceResponse, error)

	DeleteDeviceContext(ctx context.Context, request *DeleteDevice) (*DeleteDeviceResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	FindDeviceById(request *FindDeviceById) (*FindDeviceByIdResponse, error)

	FindDeviceByIdContext(ctx context.Context, request *FindDeviceById) (*FindDeviceByIdResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	FindDeviceByMac(request *FindDeviceByMac) (*FindDeviceByMacResponse, error)

	FindDeviceByMacContext(ctx context.Context, request *FindDeviceByMac) (*FindDeviceByMacResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	FindDeviceBySerial(request *FindDeviceBySerial) (*FindDeviceBySerialResponse, error)

	FindDeviceBySerialContext(ctx context.Context, request *FindDeviceBySerial) (*FindDeviceBySerialResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	FindDevicesByCustomerId(request *FindDevicesByCustomerId) (*FindDevicesByCustomerIdResponse, error)

	FindDevicesByCustomerIdContext(ctx context.Context, request *FindDevicesByCustomerId) (*FindDevicesByCustomerIdResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	FindDevicesByType(request *FindDevicesByType) (*FindDevicesByTypeResponse, error)

	FindDevicesByTypeContext(ctx context.Context, request *FindDevicesByType) (*FindDevicesByTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	QueryDeviceWithXmpp(request *QueryDeviceWithXmpp) (*string, error)

	QueryDeviceWithXmppContext(ctx context.Context, request *QueryDeviceWithXmpp) (*string, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	FindCustomerIdsWithCustomerPropertyValue(request *FindCustomerIdsWithCustomerPropertyValue) (*FindCustomerIdsWithCustomerPropertyValueResponse, error)

	FindCustomerIdsWithCustomerPropertyValueContext(ctx context.Context, request *FindCustomerIdsWithCustomerPropertyValue) (*FindCustomerIdsWithCustomerPropertyValueResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	FindDeployedWidgetsByDeviceId(request *FindDeployedWidgetsByDeviceId) (*FindDeployedWidgetsByDeviceIdResponse, error)

	FindDeployedWidgetsByDeviceIdContext(ctx context.Context, request *FindDeployedWidgetsByDeviceId) (*FindDeployedWidgetsByDeviceIdResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	CreateLocation(request *CreateLocation) (*CreateLocationResponse, error)

	CreateLocationContext(ctx context.Context, request *CreateLocation) (*CreateLocationResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	ArchiveLocation(request *ArchiveLocation) (*ArchiveLocationResponse, error)

	ArchiveLocationContext(ctx context.Context, request *ArchiveLocation) (*ArchiveLocationResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	DeleteLocation(request *DeleteLocation) (*DeleteLocationResponse, error)

	DeleteLocationContext(ctx context.Context, request *DeleteLocation) (*DeleteLocationResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	DeleteCustomerGroup(request *DeleteCustomerGroup) (*DeleteCustomerGroupResponse, error)

	DeleteCustomerGroupContext(ctx context.Context, request *DeleteCustomerGroup) (*DeleteCustomerGroupResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	FindLocationById(request *FindLocationById) (*FindLocationByIdResponse, error)

	FindLocationByIdContext(ctx context.Context, request *FindLocationById) (*FindLocationByIdResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	FindLocationsByStreet(request *FindLocationsByStreet) (*FindLocationsByStreetResponse, error)

	FindLocationsByStreetContext(ctx context.Context, request *FindLocationsByStreet) (*FindLocationsByStreetResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	FindLocationsByZip(request *FindLocationsByZip) (*FindLocationsByZipResponse, error)

	FindLocationsByZipContext(ctx context.Context, request *FindLocationsByZip) (*FindLocationsByZipResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	FindWebLoginsByCustomerId(request *FindWebLoginsByCustomerId) (*FindWebLoginsByCustomerIdResponse, error)

	FindWebLoginsByCustomerIdContext(ctx context.Context, request *FindWebLoginsByCustomerId) (*FindWebLoginsByCustomerIdResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	CreateProductSubscription(request *CreateProductSubscription) (*CreateProductSubscriptionResponse, error)

	CreateProductSubscriptionContext(ctx context.Context, request *CreateProductSubscription) (*CreateProductSubscriptionResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	UpdateProductSubscription(request *UpdateProductSubscription) (*UpdateProductSubscriptionResponse, error)

	UpdateProductSubscriptionContext(ctx context.Context, request *UpdateProductSubscription) (*UpdateProductSubscriptionResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	DeleteProductSubscription(request *DeleteProductSubscription) (*DeleteProductSubscriptionResponse, error)

	DeleteProductSubscriptionContext(ctx context.Context, request *DeleteProductSubscription) (*DeleteProductSubscriptionResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	DeleteProductSubscriptionById(request *DeleteProductSubscriptionById) (*DeleteProductSubscriptionByIdResponse, error)

	DeleteProductSubscriptionByIdContext(ctx context.Context, request *DeleteProductSubscriptionById) (*DeleteProductSubscriptionByIdResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	ArchiveProductSubscription(request *ArchiveProductSubscription) (*ArchiveProductSubscriptionResponse, error)

	ArchiveProductSubscriptionContext(ctx context.Context, request *ArchiveProductSubscription) (*ArchiveProductSubscriptionResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	FindProductSubscriptionsByCustomerId(request *FindProductSubscriptionsByCustomerId) (*FindProductSubscriptionsByCustomerIdResponse, error)

	FindProductSubscriptionsByCustomerIdContext(ctx context.Context, request *FindProductSubscriptionsByCustomerId) (*FindProductSubscriptionsByCustomerIdResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	FindAllProductSubscriptionsByCustomerId(request *FindAllProductSubscriptionsByCustomerId) (*FindAllProductSubscriptionsByCustomerIdResponse, error)

	FindAllProductSubscriptionsByCustomerIdContext(ctx context.Context, request *FindAllProductSubscriptionsByCustomerId) (*FindAllProductSubscriptionsByCustomerIdResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	FindProductSubscriptionById(request *FindProductSubscriptionById) (*FindProductSubscriptionByIdResponse, error)

	FindProductSubscriptionByIdContext(ctx context.Context, request *FindProductSubscriptionById) (*FindProductSubscriptionByIdResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	FindProductSubscriptionAlsoArchivedById(request *FindProductSubscriptionAlsoArchivedById) (*FindProductSubscriptionAlsoArchivedByIdResponse, error)

	FindProductSubscriptionAlsoArchivedByIdContext(ctx context.Context, request *FindProductSubscriptionAlsoArchivedById) (*FindProductSubscriptionAlsoArchivedByIdResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	AccountProvisioning(request *AccountProvisioning) (*AccountProvisioningResponse, error)

	AccountProvisioningContext(ctx context.Context, request *AccountProvisioning) (*AccountProvisioningResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	ManageAccount(request *ManageAccount) (*ManageAccountResponse, error)

	ManageAccountContext(ctx context.Context, request *ManageAccount) (*ManageAccountResponse, error)

	// Error can be either of the following types:
	//
	//   - ServiceFault

	UpdateLocation(request *UpdateLocation) (*UpdateLocationResponse, error)

	UpdateLocationContext(ctx context.Context, request *UpdateLocation) (*UpdateLocationResponse, error)
}

type customerWebServiceEndPoint struct {
	client *soap.Client
}

func NewCustomerWebServiceEndPoint(client *soap.Client) CustomerWebServiceEndPoint {
	return &customerWebServiceEndPoint{
		client: client,
	}
}

func (service *customerWebServiceEndPoint) FindCustomerPropertiesByCustomerIdContext(ctx context.Context, request *FindCustomerPropertiesByCustomerId) (*FindCustomerPropertiesByCustomerIdResponse, error) {
	response := new(FindCustomerPropertiesByCustomerIdResponse)
	err := service.client.CallContext(ctx, "findCustomerPropertiesByCustomerId", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) FindCustomerPropertiesByCustomerId(request *FindCustomerPropertiesByCustomerId) (*FindCustomerPropertiesByCustomerIdResponse, error) {
	return service.FindCustomerPropertiesByCustomerIdContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) FindCustomerPropertyByCustomerIdAndPropertyKeyContext(ctx context.Context, request *FindCustomerPropertyByCustomerIdAndPropertyKey) (*FindCustomerPropertyByCustomerIdAndPropertyKeyResponse, error) {
	response := new(FindCustomerPropertyByCustomerIdAndPropertyKeyResponse)
	err := service.client.CallContext(ctx, "findCustomerPropertyByCustomerIdAndPropertyKey", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) FindCustomerPropertyByCustomerIdAndPropertyKey(request *FindCustomerPropertyByCustomerIdAndPropertyKey) (*FindCustomerPropertyByCustomerIdAndPropertyKeyResponse, error) {
	return service.FindCustomerPropertyByCustomerIdAndPropertyKeyContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) CreateCustomerPropertyContext(ctx context.Context, request *CreateCustomerProperty) (*CreateCustomerPropertyResponse, error) {
	response := new(CreateCustomerPropertyResponse)
	err := service.client.CallContext(ctx, "createCustomerProperty", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) CreateCustomerProperty(request *CreateCustomerProperty) (*CreateCustomerPropertyResponse, error) {
	return service.CreateCustomerPropertyContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) UpdateCustomerPropertyContext(ctx context.Context, request *UpdateCustomerProperty) (*UpdateCustomerPropertyResponse, error) {
	response := new(UpdateCustomerPropertyResponse)
	err := service.client.CallContext(ctx, "updateCustomerProperty", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) UpdateCustomerProperty(request *UpdateCustomerProperty) (*UpdateCustomerPropertyResponse, error) {
	return service.UpdateCustomerPropertyContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) DeleteCustomerPropertyContext(ctx context.Context, request *DeleteCustomerProperty) (*DeleteCustomerPropertyResponse, error) {
	response := new(DeleteCustomerPropertyResponse)
	err := service.client.CallContext(ctx, "deleteCustomerProperty", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) DeleteCustomerProperty(request *DeleteCustomerProperty) (*DeleteCustomerPropertyResponse, error) {
	return service.DeleteCustomerPropertyContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) FindDevicePropertiesByDeviceIdContext(ctx context.Context, request *FindDevicePropertiesByDeviceId) (*FindDevicePropertiesByDeviceIdResponse, error) {
	response := new(FindDevicePropertiesByDeviceIdResponse)
	err := service.client.CallContext(ctx, "findDevicePropertiesByDeviceId", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) FindDevicePropertiesByDeviceId(request *FindDevicePropertiesByDeviceId) (*FindDevicePropertiesByDeviceIdResponse, error) {
	return service.FindDevicePropertiesByDeviceIdContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) FindDevicePropertyByDeviceIdAndPropertyKeyContext(ctx context.Context, request *FindDevicePropertyByDeviceIdAndPropertyKey) (*FindDevicePropertyByDeviceIdAndPropertyKeyResponse, error) {
	response := new(FindDevicePropertyByDeviceIdAndPropertyKeyResponse)
	err := service.client.CallContext(ctx, "findDevicePropertyByDeviceIdAndPropertyKey", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) FindDevicePropertyByDeviceIdAndPropertyKey(request *FindDevicePropertyByDeviceIdAndPropertyKey) (*FindDevicePropertyByDeviceIdAndPropertyKeyResponse, error) {
	return service.FindDevicePropertyByDeviceIdAndPropertyKeyContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) CreateDevicePropertyContext(ctx context.Context, request *CreateDeviceProperty) (*CreateDevicePropertyResponse, error) {
	response := new(CreateDevicePropertyResponse)
	err := service.client.CallContext(ctx, "createDeviceProperty", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) CreateDeviceProperty(request *CreateDeviceProperty) (*CreateDevicePropertyResponse, error) {
	return service.CreateDevicePropertyContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) UpdateDevicePropertyContext(ctx context.Context, request *UpdateDeviceProperty) (*UpdateDevicePropertyResponse, error) {
	response := new(UpdateDevicePropertyResponse)
	err := service.client.CallContext(ctx, "updateDeviceProperty", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) UpdateDeviceProperty(request *UpdateDeviceProperty) (*UpdateDevicePropertyResponse, error) {
	return service.UpdateDevicePropertyContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) DeleteDevicePropertyContext(ctx context.Context, request *DeleteDeviceProperty) (*DeleteDevicePropertyResponse, error) {
	response := new(DeleteDevicePropertyResponse)
	err := service.client.CallContext(ctx, "deleteDeviceProperty", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) DeleteDeviceProperty(request *DeleteDeviceProperty) (*DeleteDevicePropertyResponse, error) {
	return service.DeleteDevicePropertyContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) CreateCustomerContext(ctx context.Context, request *CreateCustomer) (*CreateCustomerResponse, error) {
	response := new(CreateCustomerResponse)
	err := service.client.CallContext(ctx, "createCustomer", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) CreateCustomer(request *CreateCustomer) (*CreateCustomerResponse, error) {
	return service.CreateCustomerContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) UpdateCustomerContext(ctx context.Context, request *UpdateCustomer) (*UpdateCustomerResponse, error) {
	response := new(UpdateCustomerResponse)
	err := service.client.CallContext(ctx, "updateCustomer", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) UpdateCustomer(request *UpdateCustomer) (*UpdateCustomerResponse, error) {
	return service.UpdateCustomerContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) ArchiveCustomerContext(ctx context.Context, request *ArchiveCustomer) (*ArchiveCustomerResponse, error) {
	response := new(ArchiveCustomerResponse)
	err := service.client.CallContext(ctx, "archiveCustomer", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) ArchiveCustomer(request *ArchiveCustomer) (*ArchiveCustomerResponse, error) {
	return service.ArchiveCustomerContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) DeleteCustomerContext(ctx context.Context, request *DeleteCustomer) (*DeleteCustomerResponse, error) {
	response := new(DeleteCustomerResponse)
	err := service.client.CallContext(ctx, "deleteCustomer", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) DeleteCustomer(request *DeleteCustomer) (*DeleteCustomerResponse, error) {
	return service.DeleteCustomerContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) FindCustomerByIdContext(ctx context.Context, request *FindCustomerById) (*FindCustomerByIdResponse, error) {
	response := new(FindCustomerByIdResponse)
	err := service.client.CallContext(ctx, "findCustomerById", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) FindCustomerById(request *FindCustomerById) (*FindCustomerByIdResponse, error) {
	return service.FindCustomerByIdContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) FindCustomersBySurNameContext(ctx context.Context, request *FindCustomersBySurName) (*FindCustomersBySurNameResponse, error) {
	response := new(FindCustomersBySurNameResponse)
	err := service.client.CallContext(ctx, "findCustomersBySurName", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) FindCustomersBySurName(request *FindCustomersBySurName) (*FindCustomersBySurNameResponse, error) {
	return service.FindCustomersBySurNameContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) FindCustomersByCustomerGroupIdContext(ctx context.Context, request *FindCustomersByCustomerGroupId) (*FindCustomersByCustomerGroupIdResponse, error) {
	response := new(FindCustomersByCustomerGroupIdResponse)
	err := service.client.CallContext(ctx, "findCustomersByCustomerGroupId", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) FindCustomersByCustomerGroupId(request *FindCustomersByCustomerGroupId) (*FindCustomersByCustomerGroupIdResponse, error) {
	return service.FindCustomersByCustomerGroupIdContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) FindCustomersByLocationIdContext(ctx context.Context, request *FindCustomersByLocationId) (*FindCustomersByLocationIdResponse, error) {
	response := new(FindCustomersByLocationIdResponse)
	err := service.client.CallContext(ctx, "findCustomersByLocationId", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) FindCustomersByLocationId(request *FindCustomersByLocationId) (*FindCustomersByLocationIdResponse, error) {
	return service.FindCustomersByLocationIdContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) FindCustomerIdsAndTimestampByCustomerIdLikeMaskContext(ctx context.Context, request *FindCustomerIdsAndTimestampByCustomerIdLikeMask) (*FindCustomerIdsAndTimestampByCustomerIdLikeMaskResponse, error) {
	response := new(FindCustomerIdsAndTimestampByCustomerIdLikeMaskResponse)
	err := service.client.CallContext(ctx, "findCustomerIdsAndTimestampByCustomerIdLikeMask", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) FindCustomerIdsAndTimestampByCustomerIdLikeMask(request *FindCustomerIdsAndTimestampByCustomerIdLikeMask) (*FindCustomerIdsAndTimestampByCustomerIdLikeMaskResponse, error) {
	return service.FindCustomerIdsAndTimestampByCustomerIdLikeMaskContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) FindCustomerGroupIdsAndTimestampByCustomerGroupIdLikeMaskContext(ctx context.Context, request *FindCustomerGroupIdsAndTimestampByCustomerGroupIdLikeMask) (*FindCustomerGroupIdsAndTimestampByCustomerGroupIdLikeMaskResponse, error) {
	response := new(FindCustomerGroupIdsAndTimestampByCustomerGroupIdLikeMaskResponse)
	err := service.client.CallContext(ctx, "findCustomerGroupIdsAndTimestampByCustomerGroupIdLikeMask", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) FindCustomerGroupIdsAndTimestampByCustomerGroupIdLikeMask(request *FindCustomerGroupIdsAndTimestampByCustomerGroupIdLikeMask) (*FindCustomerGroupIdsAndTimestampByCustomerGroupIdLikeMaskResponse, error) {
	return service.FindCustomerGroupIdsAndTimestampByCustomerGroupIdLikeMaskContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) FindLocationIdsAndTimestampByLocationIdLikeMaskContext(ctx context.Context, request *FindLocationIdsAndTimestampByLocationIdLikeMask) (*FindLocationIdsAndTimestampByLocationIdLikeMaskResponse, error) {
	response := new(FindLocationIdsAndTimestampByLocationIdLikeMaskResponse)
	err := service.client.CallContext(ctx, "findLocationIdsAndTimestampByLocationIdLikeMask", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) FindLocationIdsAndTimestampByLocationIdLikeMask(request *FindLocationIdsAndTimestampByLocationIdLikeMask) (*FindLocationIdsAndTimestampByLocationIdLikeMaskResponse, error) {
	return service.FindLocationIdsAndTimestampByLocationIdLikeMaskContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) FindDeviceIdsAndTimestampByDeviceIdLikeMaskContext(ctx context.Context, request *FindDeviceIdsAndTimestampByDeviceIdLikeMask) (*FindDeviceIdsAndTimestampByDeviceIdLikeMaskResponse, error) {
	response := new(FindDeviceIdsAndTimestampByDeviceIdLikeMaskResponse)
	err := service.client.CallContext(ctx, "findDeviceIdsAndTimestampByDeviceIdLikeMask", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) FindDeviceIdsAndTimestampByDeviceIdLikeMask(request *FindDeviceIdsAndTimestampByDeviceIdLikeMask) (*FindDeviceIdsAndTimestampByDeviceIdLikeMaskResponse, error) {
	return service.FindDeviceIdsAndTimestampByDeviceIdLikeMaskContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) FindProductSubscriptionIdsAndTimestampByProductSubscriptionIdLikeMaskContext(ctx context.Context, request *FindProductSubscriptionIdsAndTimestampByProductSubscriptionIdLikeMask) (*FindProductSubscriptionIdsAndTimestampByProductSubscriptionIdLikeMaskResponse, error) {
	response := new(FindProductSubscriptionIdsAndTimestampByProductSubscriptionIdLikeMaskResponse)
	err := service.client.CallContext(ctx, "findProductSubscriptionIdsAndTimestampByProductSubscriptionIdLikeMask", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) FindProductSubscriptionIdsAndTimestampByProductSubscriptionIdLikeMask(request *FindProductSubscriptionIdsAndTimestampByProductSubscriptionIdLikeMask) (*FindProductSubscriptionIdsAndTimestampByProductSubscriptionIdLikeMaskResponse, error) {
	return service.FindProductSubscriptionIdsAndTimestampByProductSubscriptionIdLikeMaskContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) AddCustomerIdToCustomerGroupIdContext(ctx context.Context, request *AddCustomerIdToCustomerGroupId) (*AddCustomerIdToCustomerGroupIdResponse, error) {
	response := new(AddCustomerIdToCustomerGroupIdResponse)
	err := service.client.CallContext(ctx, "addCustomerIdToCustomerGroupId", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) AddCustomerIdToCustomerGroupId(request *AddCustomerIdToCustomerGroupId) (*AddCustomerIdToCustomerGroupIdResponse, error) {
	return service.AddCustomerIdToCustomerGroupIdContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) RemoveCustomerIdFromCustomerGroupIdContext(ctx context.Context, request *RemoveCustomerIdFromCustomerGroupId) (*RemoveCustomerIdFromCustomerGroupIdResponse, error) {
	response := new(RemoveCustomerIdFromCustomerGroupIdResponse)
	err := service.client.CallContext(ctx, "removeCustomerIdFromCustomerGroupId", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) RemoveCustomerIdFromCustomerGroupId(request *RemoveCustomerIdFromCustomerGroupId) (*RemoveCustomerIdFromCustomerGroupIdResponse, error) {
	return service.RemoveCustomerIdFromCustomerGroupIdContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) CreateCustomerGroupContext(ctx context.Context, request *CreateCustomerGroup) (*CreateCustomerGroupResponse, error) {
	response := new(CreateCustomerGroupResponse)
	err := service.client.CallContext(ctx, "createCustomerGroup", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) CreateCustomerGroup(request *CreateCustomerGroup) (*CreateCustomerGroupResponse, error) {
	return service.CreateCustomerGroupContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) RebootDeviceByDeviceIdContext(ctx context.Context, request *RebootDeviceByDeviceId) (*RebootDeviceByDeviceIdResponse, error) {
	response := new(RebootDeviceByDeviceIdResponse)
	err := service.client.CallContext(ctx, "rebootDeviceByDeviceId", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) RebootDeviceByDeviceId(request *RebootDeviceByDeviceId) (*RebootDeviceByDeviceIdResponse, error) {
	return service.RebootDeviceByDeviceIdContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) RebootDevicesByCustomerIdContext(ctx context.Context, request *RebootDevicesByCustomerId) (*RebootDevicesByCustomerIdResponse, error) {
	response := new(RebootDevicesByCustomerIdResponse)
	err := service.client.CallContext(ctx, "rebootDevicesByCustomerId", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) RebootDevicesByCustomerId(request *RebootDevicesByCustomerId) (*RebootDevicesByCustomerIdResponse, error) {
	return service.RebootDevicesByCustomerIdContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) ReloadPortalByDeviceIdContext(ctx context.Context, request *ReloadPortalByDeviceId) (*ReloadPortalByDeviceIdResponse, error) {
	response := new(ReloadPortalByDeviceIdResponse)
	err := service.client.CallContext(ctx, "reloadPortalByDeviceId", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) ReloadPortalByDeviceId(request *ReloadPortalByDeviceId) (*ReloadPortalByDeviceIdResponse, error) {
	return service.ReloadPortalByDeviceIdContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) ReloadPortalsByCustomerIdContext(ctx context.Context, request *ReloadPortalsByCustomerId) (*ReloadPortalsByCustomerIdResponse, error) {
	response := new(ReloadPortalsByCustomerIdResponse)
	err := service.client.CallContext(ctx, "reloadPortalsByCustomerId", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) ReloadPortalsByCustomerId(request *ReloadPortalsByCustomerId) (*ReloadPortalsByCustomerIdResponse, error) {
	return service.ReloadPortalsByCustomerIdContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) UpdateProfileLanguageByCustomerIdContext(ctx context.Context, request *UpdateProfileLanguageByCustomerId) (*UpdateProfileLanguageByCustomerIdResponse, error) {
	response := new(UpdateProfileLanguageByCustomerIdResponse)
	err := service.client.CallContext(ctx, "updateProfileLanguageByCustomerId", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) UpdateProfileLanguageByCustomerId(request *UpdateProfileLanguageByCustomerId) (*UpdateProfileLanguageByCustomerIdResponse, error) {
	return service.UpdateProfileLanguageByCustomerIdContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) CreateWebLoginContext(ctx context.Context, request *CreateWebLogin) (*CreateWebLoginResponse, error) {
	response := new(CreateWebLoginResponse)
	err := service.client.CallContext(ctx, "createWebLogin", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) CreateWebLogin(request *CreateWebLogin) (*CreateWebLoginResponse, error) {
	return service.CreateWebLoginContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) UpdateWebLoginContext(ctx context.Context, request *UpdateWebLogin) (*UpdateWebLoginResponse, error) {
	response := new(UpdateWebLoginResponse)
	err := service.client.CallContext(ctx, "updateWebLogin", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) UpdateWebLogin(request *UpdateWebLogin) (*UpdateWebLoginResponse, error) {
	return service.UpdateWebLoginContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) DeleteWebLoginContext(ctx context.Context, request *DeleteWebLogin) (*DeleteWebLoginResponse, error) {
	response := new(DeleteWebLoginResponse)
	err := service.client.CallContext(ctx, "deleteWebLogin", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) DeleteWebLogin(request *DeleteWebLogin) (*DeleteWebLoginResponse, error) {
	return service.DeleteWebLoginContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) ResetPincodesContext(ctx context.Context, request *ResetPincodes) (*ResetPincodesResponse, error) {
	response := new(ResetPincodesResponse)
	err := service.client.CallContext(ctx, "resetPincodes", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) ResetPincodes(request *ResetPincodes) (*ResetPincodesResponse, error) {
	return service.ResetPincodesContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) UpdateCustomerGroupContext(ctx context.Context, request *UpdateCustomerGroup) (*UpdateCustomerGroupResponse, error) {
	response := new(UpdateCustomerGroupResponse)
	err := service.client.CallContext(ctx, "updateCustomerGroup", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) UpdateCustomerGroup(request *UpdateCustomerGroup) (*UpdateCustomerGroupResponse, error) {
	return service.UpdateCustomerGroupContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) ArchiveCustomerGroupContext(ctx context.Context, request *ArchiveCustomerGroup) (*ArchiveCustomerGroupResponse, error) {
	response := new(ArchiveCustomerGroupResponse)
	err := service.client.CallContext(ctx, "archiveCustomerGroup", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) ArchiveCustomerGroup(request *ArchiveCustomerGroup) (*ArchiveCustomerGroupResponse, error) {
	return service.ArchiveCustomerGroupContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) FindCustomerGroupByIdContext(ctx context.Context, request *FindCustomerGroupById) (*FindCustomerGroupByIdResponse, error) {
	response := new(FindCustomerGroupByIdResponse)
	err := service.client.CallContext(ctx, "findCustomerGroupById", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) FindCustomerGroupById(request *FindCustomerGroupById) (*FindCustomerGroupByIdResponse, error) {
	return service.FindCustomerGroupByIdContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) FindCustomerGroupByNameContext(ctx context.Context, request *FindCustomerGroupByName) (*FindCustomerGroupByNameResponse, error) {
	response := new(FindCustomerGroupByNameResponse)
	err := service.client.CallContext(ctx, "findCustomerGroupByName", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) FindCustomerGroupByName(request *FindCustomerGroupByName) (*FindCustomerGroupByNameResponse, error) {
	return service.FindCustomerGroupByNameContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) FindCustomerGroupsByCustomerContext(ctx context.Context, request *FindCustomerGroupsByCustomer) (*FindCustomerGroupsByCustomerResponse, error) {
	response := new(FindCustomerGroupsByCustomerResponse)
	err := service.client.CallContext(ctx, "findCustomerGroupsByCustomer", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) FindCustomerGroupsByCustomer(request *FindCustomerGroupsByCustomer) (*FindCustomerGroupsByCustomerResponse, error) {
	return service.FindCustomerGroupsByCustomerContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) FindCustomerGroupsByCustomerIdContext(ctx context.Context, request *FindCustomerGroupsByCustomerId) (*FindCustomerGroupsByCustomerIdResponse, error) {
	response := new(FindCustomerGroupsByCustomerIdResponse)
	err := service.client.CallContext(ctx, "findCustomerGroupsByCustomerId", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) FindCustomerGroupsByCustomerId(request *FindCustomerGroupsByCustomerId) (*FindCustomerGroupsByCustomerIdResponse, error) {
	return service.FindCustomerGroupsByCustomerIdContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) CreateDeviceContext(ctx context.Context, request *CreateDevice) (*CreateDeviceResponse, error) {
	response := new(CreateDeviceResponse)
	err := service.client.CallContext(ctx, "createDevice", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) CreateDevice(request *CreateDevice) (*CreateDeviceResponse, error) {
	return service.CreateDeviceContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) UpdateDeviceContext(ctx context.Context, request *UpdateDevice) (*UpdateDeviceResponse, error) {
	response := new(UpdateDeviceResponse)
	err := service.client.CallContext(ctx, "updateDevice", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) UpdateDevice(request *UpdateDevice) (*UpdateDeviceResponse, error) {
	return service.UpdateDeviceContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) DeleteDeviceContext(ctx context.Context, request *DeleteDevice) (*DeleteDeviceResponse, error) {
	response := new(DeleteDeviceResponse)
	err := service.client.CallContext(ctx, "deleteDevice", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) DeleteDevice(request *DeleteDevice) (*DeleteDeviceResponse, error) {
	return service.DeleteDeviceContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) FindDeviceByIdContext(ctx context.Context, request *FindDeviceById) (*FindDeviceByIdResponse, error) {
	response := new(FindDeviceByIdResponse)
	err := service.client.CallContext(ctx, "findDeviceById", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) FindDeviceById(request *FindDeviceById) (*FindDeviceByIdResponse, error) {
	return service.FindDeviceByIdContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) FindDeviceByMacContext(ctx context.Context, request *FindDeviceByMac) (*FindDeviceByMacResponse, error) {
	response := new(FindDeviceByMacResponse)
	err := service.client.CallContext(ctx, "findDeviceByMac", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) FindDeviceByMac(request *FindDeviceByMac) (*FindDeviceByMacResponse, error) {
	return service.FindDeviceByMacContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) FindDeviceBySerialContext(ctx context.Context, request *FindDeviceBySerial) (*FindDeviceBySerialResponse, error) {
	response := new(FindDeviceBySerialResponse)
	err := service.client.CallContext(ctx, "findDeviceBySerial", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) FindDeviceBySerial(request *FindDeviceBySerial) (*FindDeviceBySerialResponse, error) {
	return service.FindDeviceBySerialContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) FindDevicesByCustomerIdContext(ctx context.Context, request *FindDevicesByCustomerId) (*FindDevicesByCustomerIdResponse, error) {
	response := new(FindDevicesByCustomerIdResponse)
	err := service.client.CallContext(ctx, "findDevicesByCustomerId", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) FindDevicesByCustomerId(request *FindDevicesByCustomerId) (*FindDevicesByCustomerIdResponse, error) {
	return service.FindDevicesByCustomerIdContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) FindDevicesByTypeContext(ctx context.Context, request *FindDevicesByType) (*FindDevicesByTypeResponse, error) {
	response := new(FindDevicesByTypeResponse)
	err := service.client.CallContext(ctx, "findDevicesByType", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) FindDevicesByType(request *FindDevicesByType) (*FindDevicesByTypeResponse, error) {
	return service.FindDevicesByTypeContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) QueryDeviceWithXmppContext(ctx context.Context, request *QueryDeviceWithXmpp) (*string, error) {
	response := new(string)
	err := service.client.CallContext(ctx, "queryDeviceWithXmpp", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) QueryDeviceWithXmpp(request *QueryDeviceWithXmpp) (*string, error) {
	return service.QueryDeviceWithXmppContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) FindCustomerIdsWithCustomerPropertyValueContext(ctx context.Context, request *FindCustomerIdsWithCustomerPropertyValue) (*FindCustomerIdsWithCustomerPropertyValueResponse, error) {
	response := new(FindCustomerIdsWithCustomerPropertyValueResponse)
	err := service.client.CallContext(ctx, "findCustomerIdsWithCustomerPropertyValue", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) FindCustomerIdsWithCustomerPropertyValue(request *FindCustomerIdsWithCustomerPropertyValue) (*FindCustomerIdsWithCustomerPropertyValueResponse, error) {
	return service.FindCustomerIdsWithCustomerPropertyValueContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) FindDeployedWidgetsByDeviceIdContext(ctx context.Context, request *FindDeployedWidgetsByDeviceId) (*FindDeployedWidgetsByDeviceIdResponse, error) {
	response := new(FindDeployedWidgetsByDeviceIdResponse)
	err := service.client.CallContext(ctx, "findDeployedWidgetsByDeviceId", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) FindDeployedWidgetsByDeviceId(request *FindDeployedWidgetsByDeviceId) (*FindDeployedWidgetsByDeviceIdResponse, error) {
	return service.FindDeployedWidgetsByDeviceIdContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) CreateLocationContext(ctx context.Context, request *CreateLocation) (*CreateLocationResponse, error) {
	response := new(CreateLocationResponse)
	err := service.client.CallContext(ctx, "createLocation", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) CreateLocation(request *CreateLocation) (*CreateLocationResponse, error) {
	return service.CreateLocationContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) ArchiveLocationContext(ctx context.Context, request *ArchiveLocation) (*ArchiveLocationResponse, error) {
	response := new(ArchiveLocationResponse)
	err := service.client.CallContext(ctx, "archiveLocation", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) ArchiveLocation(request *ArchiveLocation) (*ArchiveLocationResponse, error) {
	return service.ArchiveLocationContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) DeleteLocationContext(ctx context.Context, request *DeleteLocation) (*DeleteLocationResponse, error) {
	response := new(DeleteLocationResponse)
	err := service.client.CallContext(ctx, "deleteLocation", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) DeleteLocation(request *DeleteLocation) (*DeleteLocationResponse, error) {
	return service.DeleteLocationContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) DeleteCustomerGroupContext(ctx context.Context, request *DeleteCustomerGroup) (*DeleteCustomerGroupResponse, error) {
	response := new(DeleteCustomerGroupResponse)
	err := service.client.CallContext(ctx, "deleteCustomerGroup", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) DeleteCustomerGroup(request *DeleteCustomerGroup) (*DeleteCustomerGroupResponse, error) {
	return service.DeleteCustomerGroupContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) FindLocationByIdContext(ctx context.Context, request *FindLocationById) (*FindLocationByIdResponse, error) {
	response := new(FindLocationByIdResponse)
	err := service.client.CallContext(ctx, "findLocationById", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) FindLocationById(request *FindLocationById) (*FindLocationByIdResponse, error) {
	return service.FindLocationByIdContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) FindLocationsByStreetContext(ctx context.Context, request *FindLocationsByStreet) (*FindLocationsByStreetResponse, error) {
	response := new(FindLocationsByStreetResponse)
	err := service.client.CallContext(ctx, "findLocationsByStreet", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) FindLocationsByStreet(request *FindLocationsByStreet) (*FindLocationsByStreetResponse, error) {
	return service.FindLocationsByStreetContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) FindLocationsByZipContext(ctx context.Context, request *FindLocationsByZip) (*FindLocationsByZipResponse, error) {
	response := new(FindLocationsByZipResponse)
	err := service.client.CallContext(ctx, "findLocationsByZip", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) FindLocationsByZip(request *FindLocationsByZip) (*FindLocationsByZipResponse, error) {
	return service.FindLocationsByZipContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) FindWebLoginsByCustomerIdContext(ctx context.Context, request *FindWebLoginsByCustomerId) (*FindWebLoginsByCustomerIdResponse, error) {
	response := new(FindWebLoginsByCustomerIdResponse)
	err := service.client.CallContext(ctx, "findWebLoginsByCustomerId", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) FindWebLoginsByCustomerId(request *FindWebLoginsByCustomerId) (*FindWebLoginsByCustomerIdResponse, error) {
	return service.FindWebLoginsByCustomerIdContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) CreateProductSubscriptionContext(ctx context.Context, request *CreateProductSubscription) (*CreateProductSubscriptionResponse, error) {
	response := new(CreateProductSubscriptionResponse)
	err := service.client.CallContext(ctx, "createProductSubscription", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) CreateProductSubscription(request *CreateProductSubscription) (*CreateProductSubscriptionResponse, error) {
	return service.CreateProductSubscriptionContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) UpdateProductSubscriptionContext(ctx context.Context, request *UpdateProductSubscription) (*UpdateProductSubscriptionResponse, error) {
	response := new(UpdateProductSubscriptionResponse)
	err := service.client.CallContext(ctx, "updateProductSubscription", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) UpdateProductSubscription(request *UpdateProductSubscription) (*UpdateProductSubscriptionResponse, error) {
	return service.UpdateProductSubscriptionContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) DeleteProductSubscriptionContext(ctx context.Context, request *DeleteProductSubscription) (*DeleteProductSubscriptionResponse, error) {
	response := new(DeleteProductSubscriptionResponse)
	err := service.client.CallContext(ctx, "deleteProductSubscription", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) DeleteProductSubscription(request *DeleteProductSubscription) (*DeleteProductSubscriptionResponse, error) {
	return service.DeleteProductSubscriptionContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) DeleteProductSubscriptionByIdContext(ctx context.Context, request *DeleteProductSubscriptionById) (*DeleteProductSubscriptionByIdResponse, error) {
	response := new(DeleteProductSubscriptionByIdResponse)
	err := service.client.CallContext(ctx, "deleteProductSubscriptionById", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) DeleteProductSubscriptionById(request *DeleteProductSubscriptionById) (*DeleteProductSubscriptionByIdResponse, error) {
	return service.DeleteProductSubscriptionByIdContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) ArchiveProductSubscriptionContext(ctx context.Context, request *ArchiveProductSubscription) (*ArchiveProductSubscriptionResponse, error) {
	response := new(ArchiveProductSubscriptionResponse)
	err := service.client.CallContext(ctx, "archiveProductSubscription", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) ArchiveProductSubscription(request *ArchiveProductSubscription) (*ArchiveProductSubscriptionResponse, error) {
	return service.ArchiveProductSubscriptionContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) FindProductSubscriptionsByCustomerIdContext(ctx context.Context, request *FindProductSubscriptionsByCustomerId) (*FindProductSubscriptionsByCustomerIdResponse, error) {
	response := new(FindProductSubscriptionsByCustomerIdResponse)
	err := service.client.CallContext(ctx, "findProductSubscriptionsByCustomerId", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) FindProductSubscriptionsByCustomerId(request *FindProductSubscriptionsByCustomerId) (*FindProductSubscriptionsByCustomerIdResponse, error) {
	return service.FindProductSubscriptionsByCustomerIdContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) FindAllProductSubscriptionsByCustomerIdContext(ctx context.Context, request *FindAllProductSubscriptionsByCustomerId) (*FindAllProductSubscriptionsByCustomerIdResponse, error) {
	response := new(FindAllProductSubscriptionsByCustomerIdResponse)
	err := service.client.CallContext(ctx, "findAllProductSubscriptionsByCustomerId", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) FindAllProductSubscriptionsByCustomerId(request *FindAllProductSubscriptionsByCustomerId) (*FindAllProductSubscriptionsByCustomerIdResponse, error) {
	return service.FindAllProductSubscriptionsByCustomerIdContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) FindProductSubscriptionByIdContext(ctx context.Context, request *FindProductSubscriptionById) (*FindProductSubscriptionByIdResponse, error) {
	response := new(FindProductSubscriptionByIdResponse)
	err := service.client.CallContext(ctx, "findProductSubscriptionById", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) FindProductSubscriptionById(request *FindProductSubscriptionById) (*FindProductSubscriptionByIdResponse, error) {
	return service.FindProductSubscriptionByIdContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) FindProductSubscriptionAlsoArchivedByIdContext(ctx context.Context, request *FindProductSubscriptionAlsoArchivedById) (*FindProductSubscriptionAlsoArchivedByIdResponse, error) {
	response := new(FindProductSubscriptionAlsoArchivedByIdResponse)
	err := service.client.CallContext(ctx, "findProductSubscriptionAlsoArchivedById", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) FindProductSubscriptionAlsoArchivedById(request *FindProductSubscriptionAlsoArchivedById) (*FindProductSubscriptionAlsoArchivedByIdResponse, error) {
	return service.FindProductSubscriptionAlsoArchivedByIdContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) AccountProvisioningContext(ctx context.Context, request *AccountProvisioning) (*AccountProvisioningResponse, error) {
	response := new(AccountProvisioningResponse)
	err := service.client.CallContext(ctx, "accountProvisioning", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) AccountProvisioning(request *AccountProvisioning) (*AccountProvisioningResponse, error) {
	return service.AccountProvisioningContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) ManageAccountContext(ctx context.Context, request *ManageAccount) (*ManageAccountResponse, error) {
	response := new(ManageAccountResponse)
	err := service.client.CallContext(ctx, "manageAccount", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) ManageAccount(request *ManageAccount) (*ManageAccountResponse, error) {
	return service.ManageAccountContext(
		context.Background(),
		request,
	)
}

func (service *customerWebServiceEndPoint) UpdateLocationContext(ctx context.Context, request *UpdateLocation) (*UpdateLocationResponse, error) {
	response := new(UpdateLocationResponse)
	err := service.client.CallContext(ctx, "updateLocation", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *customerWebServiceEndPoint) UpdateLocation(request *UpdateLocation) (*UpdateLocationResponse, error) {
	return service.UpdateLocationContext(
		context.Background(),
		request,
	)
}
